<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://bilyz98.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://bilyz98.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-06-07T09:40:07+00:00</updated><id>https://bilyz98.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Artificial Intelligence</title><link href="https://bilyz98.github.io/blog/2024/ai/" rel="alternate" type="text/html" title="Artificial Intelligence"/><published>2024-06-06T11:59:00+00:00</published><updated>2024-06-06T11:59:00+00:00</updated><id>https://bilyz98.github.io/blog/2024/ai</id><content type="html" xml:base="https://bilyz98.github.io/blog/2024/ai/"><![CDATA[<h1 id="artificial-intelligence">Artificial Intelligence</h1> <h2 id="difference-between-cuda-core-and-cpu-core">Difference between CUDA core and CPU core?</h2> <h2 id="backpropagation-code-example">Backpropagation code example</h2> <p><a href="https://alexgl-github.github.io/github/jekyll/2021/04/16/Dense_layer.html">Deep learning models from scratch using C++ and Python</a></p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cstdio&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;cassert&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;numeric&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;array&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;chrono&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;functional&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;array&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;iterator&gt;</span><span class="cp">
</span>

<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">high_resolution_clock</span><span class="p">;</span>
<span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">duration_cast</span><span class="p">;</span>
<span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">microseconds</span><span class="p">;</span>

<span class="k">static</span> <span class="k">auto</span> <span class="n">ones_initializer</span> <span class="o">=</span> <span class="p">[]()</span> <span class="o">-&gt;</span> <span class="kt">float</span> <span class="p">{</span>
  <span class="k">return</span> <span class="mf">1.0</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">template</span><span class="o">&lt;</span><span class="kt">size_t</span> <span class="n">num_inputs</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">num_outputs</span><span class="p">,</span> <span class="k">typename</span> <span class="nc">T</span> <span class="o">=</span> <span class="kt">float</span><span class="p">,</span> <span class="k">typename</span> <span class="nc">Initializer</span> <span class="o">=</span> <span class="k">decltype</span><span class="p">(</span><span class="n">ones_initializer</span><span class="p">)&gt;</span>
<span class="k">class</span> <span class="nc">Network</span> <span class="p">{</span>
<span class="nl">public:</span>
  <span class="n">Network</span><span class="p">(</span><span class="n">Initializer</span> <span class="n">initializer</span> <span class="o">=</span> <span class="n">ones_initializer</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num_outputs</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">num_inputs</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">weights_</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">initializer</span><span class="p">();</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">num_outputs</span><span class="o">&gt;</span> <span class="n">Forward</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">num_inputs</span><span class="o">&gt;&amp;</span> <span class="n">inputs</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">num_outputs</span><span class="o">&gt;</span> <span class="n">outputs</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num_outputs</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">outputs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">inner_product</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">begin</span><span class="p">(</span><span class="n">inputs</span><span class="p">),</span> <span class="n">std</span><span class="o">::</span><span class="n">end</span><span class="p">(</span><span class="n">inputs</span><span class="p">),</span> <span class="n">std</span><span class="o">::</span><span class="n">begin</span><span class="p">(</span><span class="n">weights_</span><span class="p">[</span><span class="n">i</span><span class="p">]),</span> <span class="n">T</span><span class="p">{</span><span class="mi">0</span><span class="p">});</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">outputs</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kt">void</span> <span class="nf">PrintWeights</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num_outputs</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">num_inputs</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">weights_</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>


  <span class="kt">void</span> <span class="nf">Backward</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">num_inputs</span><span class="o">&gt;&amp;</span> <span class="n">inputs</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">num_outputs</span><span class="o">&gt;&amp;</span> <span class="n">dloss_dy</span><span class="p">,</span> <span class="n">T</span> <span class="n">learning_rate</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num_outputs</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">num_inputs</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">weights_</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">-=</span> <span class="n">learning_rate</span> <span class="o">*</span> <span class="n">dloss_dy</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">inputs</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
      <span class="p">}</span>
    <span class="p">}</span>
  
  <span class="p">}</span>
<span class="k">private</span><span class="o">:</span>
  <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">num_inputs</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">num_outputs</span><span class="o">&gt;</span> <span class="n">weights_</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">template</span><span class="o">&lt;</span><span class="kt">size_t</span> <span class="n">num_inputs</span><span class="p">,</span> <span class="k">typename</span> <span class="nc">T</span> <span class="o">=</span> <span class="kt">float</span><span class="p">&gt;</span>
<span class="k">class</span> <span class="nc">MSE</span> <span class="p">{</span>
<span class="nl">public:</span>
  <span class="n">T</span> <span class="k">operator</span><span class="p">()(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">num_inputs</span><span class="o">&gt;&amp;</span> <span class="n">outputs</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">num_inputs</span><span class="o">&gt;&amp;</span> <span class="n">targets</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">T</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num_inputs</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">sum</span> <span class="o">+=</span> <span class="p">(</span><span class="n">outputs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">targets</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">*</span> <span class="p">(</span><span class="n">outputs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">targets</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">sum</span> <span class="o">/</span> <span class="n">num_inputs</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">num_inputs</span><span class="o">&gt;</span> <span class="n">Gradient</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">num_inputs</span><span class="o">&gt;&amp;</span> <span class="n">outputs</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">num_inputs</span><span class="o">&gt;&amp;</span> <span class="n">targets</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">num_inputs</span><span class="o">&gt;</span> <span class="n">gradient</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num_inputs</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">gradient</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="n">outputs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">targets</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">gradient</span><span class="p">;</span>
  <span class="p">}</span> 
<span class="p">};</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">Network</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="o">&gt;</span> <span class="n">network</span><span class="p">;</span>
  <span class="k">const</span> <span class="kt">int</span> <span class="n">num_iterators</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
  <span class="n">network</span><span class="p">.</span><span class="n">PrintWeights</span><span class="p">();</span>

  <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="kt">float</span><span class="p">,</span> <span class="mi">3</span><span class="o">&gt;</span> <span class="n">inputs</span> <span class="o">=</span> <span class="p">{</span><span class="mf">2.0</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">};</span>
  <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="kt">float</span><span class="p">,</span> <span class="mi">2</span><span class="o">&gt;</span> <span class="n">targets</span> <span class="o">=</span> <span class="p">{</span><span class="mf">1.5</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">};</span>
  <span class="n">MSE</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">&gt;</span> <span class="n">mse</span><span class="p">;</span>

  <span class="k">for</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num_iterators</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
    <span class="k">auto</span> <span class="n">start</span> <span class="o">=</span> <span class="n">high_resolution_clock</span><span class="o">::</span><span class="n">now</span><span class="p">();</span>
    <span class="k">auto</span> <span class="n">yhat</span> <span class="o">=</span> <span class="n">network</span><span class="p">.</span><span class="n">Forward</span><span class="p">(</span><span class="n">inputs</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Loss: "</span> <span class="o">&lt;&lt;</span> <span class="n">mse</span><span class="p">(</span><span class="n">yhat</span><span class="p">,</span> <span class="n">targets</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Gradient: "</span> <span class="o">&lt;&lt;</span> <span class="n">mse</span><span class="p">.</span><span class="n">Gradient</span><span class="p">(</span><span class="n">yhat</span><span class="p">,</span> <span class="n">targets</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"yhat:"</span> <span class="o">&lt;&lt;</span>  <span class="n">yhat</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">yhat</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="k">auto</span> <span class="n">loss</span> <span class="o">=</span> <span class="n">mse</span><span class="p">(</span><span class="n">yhat</span><span class="p">,</span> <span class="n">targets</span><span class="p">);</span>
    <span class="k">auto</span> <span class="n">dloss_dy</span> <span class="o">=</span> <span class="n">mse</span><span class="p">.</span><span class="n">Gradient</span><span class="p">(</span><span class="n">yhat</span><span class="p">,</span> <span class="n">targets</span><span class="p">);</span>
    <span class="n">network</span><span class="p">.</span><span class="n">Backward</span><span class="p">(</span><span class="n">inputs</span><span class="p">,</span> <span class="n">dloss_dy</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">);</span>
    <span class="k">auto</span> <span class="n">end</span> <span class="o">=</span> <span class="n">high_resolution_clock</span><span class="o">::</span><span class="n">now</span><span class="p">();</span>
    <span class="k">auto</span> <span class="n">duration</span> <span class="o">=</span> <span class="n">duration_cast</span><span class="o">&lt;</span><span class="n">microseconds</span><span class="o">&gt;</span><span class="p">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Time: "</span> <span class="o">&lt;&lt;</span> <span class="n">duration</span><span class="p">.</span><span class="n">count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">" microseconds"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="n">yhat</span> <span class="o">=</span> <span class="n">network</span><span class="p">.</span><span class="n">Forward</span><span class="p">(</span><span class="n">inputs</span><span class="p">);</span> 
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"yhat"</span> <span class="o">&lt;&lt;</span> <span class="n">yhat</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">yhat</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"----------------"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>


  <span class="p">}</span>

  <span class="c1">// for (int i = 0; i &lt; 1000; ++i) {</span>
  <span class="c1">//   auto outputs = network.Forward(inputs);</span>
  <span class="c1">//   network.Backward(inputs, outputs, targets, 0.1);</span>
  <span class="c1">// }</span>

  <span class="n">network</span><span class="p">.</span><span class="n">PrintWeights</span><span class="p">();</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="mlsys-seminars-and-resources">MLSys seminars and resources</h2> <ul> <li><a href="https://mlsys-sg.org/about/">https://mlsys-sg.org/about/</a></li> <li><a href="https://www.youtube.com/@StanfordMLSysSeminars">Stanford MLSys seminar</a></li> <li><a href="https://www.youtube.com/@MITHANLab/videos">MIT HAN Lab</a></li> </ul> <h2 id="system-for-llm-papers">System for LLM papers</h2> <ul> <li><a href="https://arxiv.org/pdf/2001.08361.pdf">Scaling Laws for Neural Language Models</a></li> </ul> <h2 id="conda">Conda</h2> <p>What is conda? Conda is a package version management system for python project. For example you can set python running version to 3.7 while running oaas and then set python version to 3.11 in anohter env while running another python project.</p> <p>Install specific version of packge The reason we need to do this is that some whl files requires specific version of python to work.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda install python=3.7
</code></pre></div></div> <p>Create conda workspace for one project</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda create --name &lt;my-env&gt; python=&lt;version&gt;
</code></pre></div></div> <p>Activate conda env</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda activate &lt;my-env&gt;
</code></pre></div></div>]]></content><author><name></name></author><category term="ai"/><category term="ai"/><category term="ml"/><summary type="html"><![CDATA[Artificial Intelligence]]></summary></entry><entry><title type="html">Cloud</title><link href="https://bilyz98.github.io/blog/2024/cloud/" rel="alternate" type="text/html" title="Cloud"/><published>2024-06-05T11:59:00+00:00</published><updated>2024-06-05T11:59:00+00:00</updated><id>https://bilyz98.github.io/blog/2024/cloud</id><content type="html" xml:base="https://bilyz98.github.io/blog/2024/cloud/"><![CDATA[<h2 id="k8s">K8s</h2> <h2 id="docker">Docker</h2>]]></content><author><name></name></author><category term="cloud"/><category term="k8s"/><category term="cloud"/><summary type="html"><![CDATA[cloud]]></summary></entry><entry><title type="html">Convert SVG figures to pdf_latex before submitting to arxiv</title><link href="https://bilyz98.github.io/blog/2024/arxiv-cleaner/" rel="alternate" type="text/html" title="Convert SVG figures to pdf_latex before submitting to arxiv"/><published>2024-06-04T11:59:00+00:00</published><updated>2024-06-04T11:59:00+00:00</updated><id>https://bilyz98.github.io/blog/2024/arxiv-cleaner</id><content type="html" xml:base="https://bilyz98.github.io/blog/2024/arxiv-cleaner/"><![CDATA[<h1 id="convert-svg-figures-to-pdf_latex-before-submitting-to-arxiv">Convert SVG figures to pdf_latex before submitting to arxiv</h1> <p>Problem: arxiv does not accept SVG figures. So I have to update code from</p> <div class="language-latex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">\includesvg</span><span class="na">[test.svg]</span>
</code></pre></div></div> <p>to</p> <div class="language-latex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">\includegraphics</span><span class="na">[width=0.5\textwidth]</span><span class="p">{</span>test.png<span class="p">}</span>
</code></pre></div></div> <p>or I can update code like this</p> <div class="language-latex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">\includeinkscape</span><span class="na">[width=0.5\textwidth]</span><span class="p">{</span>test.pdf<span class="p">_</span>latex<span class="p">}</span>
</code></pre></div></div> <p>This svg to pdf_latex conversion is done by inkscape package if you run this compilation</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pdflatex -shell-escape test.tex
</code></pre></div></div> <p>pdf_latex figures are stored in directories <code class="language-plaintext highlighter-rouge">svg_inkscape</code></p> <p>And you can use arxiv-latex-cleaner to convert</p> <div class="language-latex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">\includesvg</span><span class="na">[test.svg]</span>
</code></pre></div></div> <p>to</p> <div class="language-latex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">\includeinkscape</span><span class="na">[width=0.5\textwidth]</span><span class="p">{</span>test<span class="p">_</span>svg.pdf<span class="p">_</span>latex<span class="p">}</span>
</code></pre></div></div> <p>for you.</p> <p>This can help you save your time manually updating source code which is very handy.</p> <p><a href="https://github.com/google-research/arxiv-latex-cleaner">https://github.com/google-research/arxiv-latex-cleaner</a></p>]]></content><author><name></name></author><category term="latex"/><category term="latex"/><summary type="html"><![CDATA[Convert SVG figures to pdf_latex before submitting to arxiv]]></summary></entry><entry><title type="html">Binary search algorithm variant</title><link href="https://bilyz98.github.io/blog/2021/binary-search-algorithm-variant/" rel="alternate" type="text/html" title="Binary search algorithm variant"/><published>2021-01-12T07:00:30+00:00</published><updated>2021-01-12T07:00:30+00:00</updated><id>https://bilyz98.github.io/blog/2021/binary-search-algorithm-variant</id><content type="html" xml:base="https://bilyz98.github.io/blog/2021/binary-search-algorithm-variant/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">my question:</title><link href="https://bilyz98.github.io/blog/2020/my-question/" rel="alternate" type="text/html" title="my question:"/><published>2020-11-05T03:14:33+00:00</published><updated>2020-11-05T03:14:33+00:00</updated><id>https://bilyz98.github.io/blog/2020/my-question</id><content type="html" xml:base="https://bilyz98.github.io/blog/2020/my-question/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Learning-based memory allocation for C++ server workloads summary</title><link href="https://bilyz98.github.io/blog/2020/learning-based-memory-allocation-for-c-server-workloads-summary/" rel="alternate" type="text/html" title="Learning-based memory allocation for C++ server workloads summary"/><published>2020-10-13T12:48:17+00:00</published><updated>2020-10-13T12:48:17+00:00</updated><id>https://bilyz98.github.io/blog/2020/learning-based-memory-allocation-for-c-server-workloads-summary</id><content type="html" xml:base="https://bilyz98.github.io/blog/2020/learning-based-memory-allocation-for-c-server-workloads-summary/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">a post with formatting and links</title><link href="https://bilyz98.github.io/blog/2015/formatting-and-links/" rel="alternate" type="text/html" title="a post with formatting and links"/><published>2015-03-15T16:40:16+00:00</published><updated>2015-03-15T16:40:16+00:00</updated><id>https://bilyz98.github.io/blog/2015/formatting-and-links</id><content type="html" xml:base="https://bilyz98.github.io/blog/2015/formatting-and-links/"><![CDATA[<p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h4 id="hipster-list">Hipster list</h4> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> <h4 id="check-list">Check List</h4> <ul class="task-list"> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked"/>Brush Teeth</li> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled"/>Put on socks <ul class="task-list"> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked"/>Put on left sock</li> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled"/>Put on right sock</li> </ul> </li> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked"/>Go to school</li> </ul> <p>Hoodie Thundercats retro, tote bag 8-bit Godard craft beer gastropub. Truffaut Tumblr taxidermy, raw denim Kickstarter sartorial dreamcatcher. Quinoa chambray slow-carb salvia readymade, bicycle rights 90’s yr typewriter selfies letterpress cardigan vegan.</p> <hr/> <p>Pug heirloom High Life vinyl swag, single-origin coffee four dollar toast taxidermy reprehenderit fap distillery master cleanse locavore. Est anim sapiente leggings Brooklyn ea. Thundercats locavore excepteur veniam eiusmod. Raw denim Truffaut Schlitz, migas sapiente Portland VHS twee Bushwick Marfa typewriter retro id keytar.</p> <blockquote> <p>We do not grow absolutely, chronologically. We grow sometimes in one dimension, and not in another, unevenly. We grow partially. We are relative. We are mature in one realm, childish in another. —Anais Nin</p> </blockquote> <p>Fap aliqua qui, scenester pug Echo Park polaroid irony shabby chic ex cardigan church-key Odd Future accusamus. Blog stumptown sartorial squid, gastropub duis aesthetic Truffaut vero. Pinterest tilde twee, odio mumblecore jean shorts lumbersexual.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="links"/><summary type="html"><![CDATA[march & april, looking forward to summer]]></summary></entry></feed>