<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://bilyz98.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://bilyz98.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-08-26T02:38:04+00:00</updated><id>https://bilyz98.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">LightGBM dataset</title><link href="https://bilyz98.github.io/blog/2024/lightgbm-dataset/" rel="alternate" type="text/html" title="LightGBM dataset"/><published>2024-08-23T11:59:00+00:00</published><updated>2024-08-23T11:59:00+00:00</updated><id>https://bilyz98.github.io/blog/2024/lightgbm-dataset</id><content type="html" xml:base="https://bilyz98.github.io/blog/2024/lightgbm-dataset/"><![CDATA[<h2 id="early-stop-of-lightgbm-training">Early stop of lightgbm training</h2> <p>The function <code class="language-plaintext highlighter-rouge">LGBM_BoosterGetEval</code> itself does not directly affect the early stopping mechanism of <code class="language-plaintext highlighter-rouge">LGBM_BoosterUpdateOneIter</code>. However, it plays a crucial role in the process by providing the evaluation results needed to determine whether early stopping should occur.</p> <p>Here’s how it works:</p> <ol> <li> <p><strong>Evaluation Metrics</strong>: During training, <code class="language-plaintext highlighter-rouge">LGBM_BoosterUpdateOneIter</code> updates the model for one iteration. After each iteration, <code class="language-plaintext highlighter-rouge">LGBM_BoosterGetEval</code> can be used to retrieve the evaluation metrics (e.g., RMSE, accuracy) for the training and validation datasets.</p> </li> <li> <p><strong>Early Stopping Criteria</strong>: Early stopping is typically based on the performance of the model on the validation dataset. If the evaluation metric does not improve for a specified number of rounds (stopping rounds), training is stopped early to prevent overfitting.</p> </li> <li> <p><strong>Implementation</strong>: In practice, after each call to <code class="language-plaintext highlighter-rouge">LGBM_BoosterUpdateOneIter</code>, you would use <code class="language-plaintext highlighter-rouge">LGBM_BoosterGetEval</code> to get the current evaluation metric. You then compare this metric to the best metric observed so far. If there is no improvement for a certain number of iterations, you trigger early stopping.</p> </li> </ol> <p>Here’s a simplified example in C++:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;LightGBM/c_api.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Initialize datasets and booster (similar to previous example)</span>
    <span class="c1">// ...</span>

    <span class="kt">int</span> <span class="n">stopping_rounds</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">num_iterations</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">best_eval_result</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;::</span><span class="n">max</span><span class="p">();</span>
    <span class="kt">int</span> <span class="n">rounds_without_improvement</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num_iterations</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">LGBM_BoosterUpdateOneIter</span><span class="p">(</span><span class="n">booster</span><span class="p">);</span>

        <span class="c1">// Get evaluation result</span>
        <span class="kt">double</span> <span class="n">eval_result</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">out_len</span><span class="p">;</span>
        <span class="n">LGBM_BoosterGetEval</span><span class="p">(</span><span class="n">booster</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">out_len</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">eval_result</span><span class="p">);</span> <span class="c1">// Assuming 1 is the index for validation data</span>

        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Iteration "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">": RMSE = "</span> <span class="o">&lt;&lt;</span> <span class="n">eval_result</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>

        <span class="c1">// Check for early stopping</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">eval_result</span> <span class="o">&lt;</span> <span class="n">best_eval_result</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">best_eval_result</span> <span class="o">=</span> <span class="n">eval_result</span><span class="p">;</span>
            <span class="n">rounds_without_improvement</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">rounds_without_improvement</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">rounds_without_improvement</span> <span class="o">&gt;=</span> <span class="n">stopping_rounds</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Early stopping at iteration "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// Save model and free memory (similar to previous example)</span>
    <span class="c1">// ...</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>In this example, <code class="language-plaintext highlighter-rouge">LGBM_BoosterGetEval</code> is used to retrieve the evaluation metric after each iteration, and the early stopping logic is implemented based on the retrieved metric¹². If the evaluation metric does not improve for <code class="language-plaintext highlighter-rouge">stopping_rounds</code> consecutive iterations, training is stopped early.</p> <p>If you have any more questions or need further clarification, feel free to ask!</p> <p>Source: Conversation with Copilot, 8/24/2024 (1) C API — LightGBM 4.5.0.99 documentation - Read the Docs. https://lightgbm.readthedocs.io/en/latest/C-API.html. (2) lightgbm.early_stopping — LightGBM 4.5.0.99 documentation - Read the Docs. https://lightgbm.readthedocs.io/en/latest/pythonapi/lightgbm.early_stopping.html.</p> <h2 id="split-lightgbm-dataset">Split lightgbm dataset</h2> <p>Yes, you can split a LightGBM dataset object into training and evaluation datasets. Here’s an example in C++:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;LightGBM/c_api.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;random&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Load the full dataset</span>
    <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">data_path</span> <span class="o">=</span> <span class="s">"full_data.txt"</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">params</span> <span class="o">=</span> <span class="s">"objective=regression metric=rmse"</span><span class="p">;</span>
    <span class="n">DatasetHandle</span> <span class="n">full_data</span><span class="p">;</span>
    <span class="n">LGBM_DatasetCreateFromFile</span><span class="p">(</span><span class="n">data_path</span><span class="p">,</span> <span class="n">params</span><span class="p">,</span> <span class="nb">nullptr</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">full_data</span><span class="p">);</span>

    <span class="c1">// Get the number of data points</span>
    <span class="kt">int</span> <span class="n">num_data</span><span class="p">;</span>
    <span class="n">LGBM_DatasetGetNumData</span><span class="p">(</span><span class="n">full_data</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">num_data</span><span class="p">);</span>

    <span class="c1">// Split indices into training and evaluation sets</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">indices</span><span class="p">(</span><span class="n">num_data</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">iota</span><span class="p">(</span><span class="n">indices</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">indices</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">shuffle</span><span class="p">(</span><span class="n">indices</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">indices</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="n">mt19937</span><span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">random_device</span><span class="p">{}()});</span>

    <span class="kt">int</span> <span class="n">train_size</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mf">0.8</span> <span class="o">*</span> <span class="n">num_data</span><span class="p">);</span> <span class="c1">// 80% for training</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">train_indices</span><span class="p">(</span><span class="n">indices</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">indices</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">train_size</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">eval_indices</span><span class="p">(</span><span class="n">indices</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">train_size</span><span class="p">,</span> <span class="n">indices</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>

    <span class="c1">// Create training and evaluation datasets</span>
    <span class="n">DatasetHandle</span> <span class="n">train_data</span><span class="p">;</span>
    <span class="n">DatasetHandle</span> <span class="n">eval_data</span><span class="p">;</span>
    <span class="n">LGBM_DatasetCreateSubset</span><span class="p">(</span><span class="n">full_data</span><span class="p">,</span> <span class="n">train_indices</span><span class="p">.</span><span class="n">data</span><span class="p">(),</span> <span class="n">train_size</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">train_data</span><span class="p">);</span>
    <span class="n">LGBM_DatasetCreateSubset</span><span class="p">(</span><span class="n">full_data</span><span class="p">,</span> <span class="n">eval_indices</span><span class="p">.</span><span class="n">data</span><span class="p">(),</span> <span class="n">num_data</span> <span class="o">-</span> <span class="n">train_size</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">eval_data</span><span class="p">);</span>

    <span class="c1">// Create booster</span>
    <span class="n">BoosterHandle</span> <span class="n">booster</span><span class="p">;</span>
    <span class="n">LGBM_BoosterCreate</span><span class="p">(</span><span class="n">train_data</span><span class="p">,</span> <span class="n">params</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">booster</span><span class="p">);</span>

    <span class="c1">// Train model</span>
    <span class="kt">int</span> <span class="n">num_iterations</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num_iterations</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">LGBM_BoosterUpdateOneIter</span><span class="p">(</span><span class="n">booster</span><span class="p">);</span>

        <span class="c1">// Evaluate model</span>
        <span class="kt">double</span> <span class="n">eval_result</span><span class="p">;</span>
        <span class="n">LGBM_BoosterGetEval</span><span class="p">(</span><span class="n">booster</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">eval_result</span><span class="p">);</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Iteration "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">": RMSE = "</span> <span class="o">&lt;&lt;</span> <span class="n">eval_result</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Save model</span>
    <span class="n">LGBM_BoosterSaveModel</span><span class="p">(</span><span class="n">booster</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">"model.txt"</span><span class="p">);</span>

    <span class="c1">// Free memory</span>
    <span class="n">LGBM_DatasetFree</span><span class="p">(</span><span class="n">full_data</span><span class="p">);</span>
    <span class="n">LGBM_DatasetFree</span><span class="p">(</span><span class="n">train_data</span><span class="p">);</span>
    <span class="n">LGBM_DatasetFree</span><span class="p">(</span><span class="n">eval_data</span><span class="p">);</span>
    <span class="n">LGBM_BoosterFree</span><span class="p">(</span><span class="n">booster</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>In this example:</p> <ol> <li>The full dataset is loaded from a file.</li> <li>The dataset is split into training and evaluation sets using a random shuffle.</li> <li>Subsets are created for training and evaluation.</li> <li>A LightGBM booster is created and trained using the training dataset.</li> <li>The model is evaluated on the evaluation dataset during training.</li> </ol> <p>Feel free to adjust the parameters and paths to fit your specific use case. If you have any more questions or need further assistance, let me know!</p> <p>Source: Conversation with Copilot, 8/24/2024 (1) lightgbm.train — LightGBM 4.5.0.99 documentation - Read the Docs. https://lightgbm.readthedocs.io/en/latest/pythonapi/lightgbm.train.html. (2) LightGBM regression example with cross validation and early stop run. https://www.datasciencebyexample.com/2023/04/24/lightgbm-regression-complete-example-with-cross-validation-and-early-stop/. (3) Train a model using LightGBM - GeeksforGeeks. https://www.geeksforgeeks.org/train-a-model-using-lightgbm/. (4) LightGBM - An In-Depth Guide [Python API] - CoderzColumn. https://coderzcolumn.com/tutorials/machine-learning/lightgbm-an-in-depth-guide-python.</p>]]></content><author><name></name></author><category term="ml"/><category term="ml"/><category term="lightgbm"/><summary type="html"><![CDATA[Early stop of lightgbm training The function LGBM_BoosterGetEval itself does not directly affect the early stopping mechanism of LGBM_BoosterUpdateOneIter. However, it plays a crucial role in the process by providing the evaluation results needed to determine whether early stopping should occur.]]></summary></entry><entry><title type="html">Difference between deep copy and shallow copy in python</title><link href="https://bilyz98.github.io/blog/2024/python-deep-copy/" rel="alternate" type="text/html" title="Difference between deep copy and shallow copy in python"/><published>2024-08-20T11:59:00+00:00</published><updated>2024-08-20T11:59:00+00:00</updated><id>https://bilyz98.github.io/blog/2024/python-deep-copy</id><content type="html" xml:base="https://bilyz98.github.io/blog/2024/python-deep-copy/"><![CDATA[<h3 id="shallow-copy">Shallow Copy</h3> <ul> <li><strong>Definition</strong>: A shallow copy creates a new object, but inserts references into it to the objects found in the original.</li> <li><strong>Behavior</strong>: Only the top-level object is copied. If the original object contains other objects (like lists within lists), the references to these objects are copied, not the objects themselves.</li> <li><strong>Use Case</strong>: Suitable for simple data structures or when you don’t need to copy nested objects.</li> <li><strong>Example</strong>: <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">copy</span>

<span class="n">original</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="mi">4</span><span class="p">]</span>
<span class="n">shallow_copy</span> <span class="o">=</span> <span class="n">copy</span><span class="p">.</span><span class="nf">copy</span><span class="p">(</span><span class="n">original</span><span class="p">)</span>

<span class="n">shallow_copy</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="sh">'</span><span class="s">changed</span><span class="sh">'</span>
<span class="nf">print</span><span class="p">(</span><span class="n">original</span><span class="p">)</span>  <span class="c1"># Output: [1, ['changed', 3], 4]
</span></code></pre></div> </div> </li> </ul> <h3 id="deep-copy">Deep Copy</h3> <ul> <li><strong>Definition</strong>: A deep copy creates a new object and recursively copies all objects found in the original.</li> <li><strong>Behavior</strong>: Both the top-level object and all nested objects are copied. Changes to the copied object do not affect the original object.</li> <li><strong>Use Case</strong>: Necessary when you need to copy complex data structures with nested objects.</li> <li><strong>Example</strong>: <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">copy</span>

<span class="n">original</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="mi">4</span><span class="p">]</span>
<span class="n">deep_copy</span> <span class="o">=</span> <span class="n">copy</span><span class="p">.</span><span class="nf">deepcopy</span><span class="p">(</span><span class="n">original</span><span class="p">)</span>

<span class="n">deep_copy</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="sh">'</span><span class="s">changed</span><span class="sh">'</span>
<span class="nf">print</span><span class="p">(</span><span class="n">original</span><span class="p">)</span>  <span class="c1"># Output: [1, [2, 3], 4]
</span></code></pre></div> </div> </li> </ul> <h3 id="summary">Summary</h3> <ul> <li><strong>Shallow Copy</strong>: Copies the structure of the object, but not the elements within nested objects.</li> <li><strong>Deep Copy</strong>: Copies the structure and all elements within nested objects, creating a completely independent copy.</li> </ul> <p>Understanding these differences helps you choose the right type of copy for your specific needs. If you have any more questions or need further clarification, feel free to ask!</p>]]></content><author><name></name></author><category term="python"/><summary type="html"><![CDATA[Shallow Copy Definition: A shallow copy creates a new object, but inserts references into it to the objects found in the original. Behavior: Only the top-level object is copied. If the original object contains other objects (like lists within lists), the references to these objects are copied, not the objects themselves. Use Case: Suitable for simple data structures or when you don’t need to copy nested objects. Example: ```python import copy]]></summary></entry><entry><title type="html">Python Package Path</title><link href="https://bilyz98.github.io/blog/2024/python-package-path/" rel="alternate" type="text/html" title="Python Package Path"/><published>2024-08-10T00:00:00+00:00</published><updated>2024-08-10T00:00:00+00:00</updated><id>https://bilyz98.github.io/blog/2024/python-package-path</id><content type="html" xml:base="https://bilyz98.github.io/blog/2024/python-package-path/"><![CDATA[<p>I have micrograd2 under micrograd folder but this error shows when I run test.py. how to fix it ?</p> <p>File “/home/zt/bilyz_website_new/code/micrograd/test/test.py”, line 2, in <module> from micrograd2.engine import Value ModuleNotFoundError: No module named 'micrograd2'</module></p> <p>It looks like Python is unable to find the <code class="language-plaintext highlighter-rouge">micrograd2</code> module. Here are a few steps you can try to resolve this issue:</p> <ol> <li> <p><strong>Check the Directory Structure</strong>: Ensure that the <code class="language-plaintext highlighter-rouge">micrograd2</code> folder is correctly placed within the <code class="language-plaintext highlighter-rouge">micrograd</code> directory and that it contains an <code class="language-plaintext highlighter-rouge">__init__.py</code> file. This file is necessary for Python to recognize the directory as a package.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> micrograd/
 ├── micrograd2/
 │   ├── __init__.py
 │   └── engine.py
 └── test/
     └── test.py
</code></pre></div> </div> </li> <li><strong>Update the Import Statement</strong>: If <code class="language-plaintext highlighter-rouge">micrograd2</code> is a subdirectory of <code class="language-plaintext highlighter-rouge">micrograd</code>, you might need to adjust your import statement in <code class="language-plaintext highlighter-rouge">test.py</code> to reflect the correct path. Try changing: <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kn">from</span> <span class="n">micrograd2.engine</span> <span class="kn">import</span> <span class="n">Value</span>
</code></pre></div> </div> <p>to:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kn">from</span> <span class="n">micrograd.micrograd2.engine</span> <span class="kn">import</span> <span class="n">Value</span>
</code></pre></div> </div> </li> <li><strong>Check the PYTHONPATH</strong>: Ensure that the <code class="language-plaintext highlighter-rouge">micrograd</code> directory is included in your <code class="language-plaintext highlighter-rouge">PYTHONPATH</code>. You can temporarily add it by running: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">export </span><span class="nv">PYTHONPATH</span><span class="o">=</span>/home/zt/bilyz_website_new/code/micrograd:<span class="nv">$PYTHONPATH</span>
</code></pre></div> </div> </li> <li><strong>Run the Script from the Correct Directory</strong>: Make sure you are running <code class="language-plaintext highlighter-rouge">test.py</code> from the <code class="language-plaintext highlighter-rouge">micrograd</code> directory or adjust your working directory accordingly.</li> </ol>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">cpp async</title><link href="https://bilyz98.github.io/blog/2024/cpp-async/" rel="alternate" type="text/html" title="cpp async"/><published>2024-08-05T11:59:00+00:00</published><updated>2024-08-05T11:59:00+00:00</updated><id>https://bilyz98.github.io/blog/2024/cpp-async</id><content type="html" xml:base="https://bilyz98.github.io/blog/2024/cpp-async/"><![CDATA[<p><a href="https://github.com/muluoleiguo/interview/blob/master/%E9%9D%A2%E8%AF%95/c%2B%2B%E5%B9%B6%E5%8F%91/%E5%A4%9A%E7%BA%BF%E7%A8%8B/C%2B%2B%E5%A4%9A%E7%BA%BF%E7%A8%8B.md">async</a></p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;thread&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;mutex&gt;</span><span class="cp">
#include</span><span class="cpf">&lt;future&gt;</span><span class="cp">
#include</span><span class="cpf">&lt;Windows.h&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">double</span> <span class="nf">t1</span><span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
 <span class="kt">double</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
 <span class="n">Sleep</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span><span class="c1">//假设t1函数是个复杂的计算过程，需要消耗3秒</span>
 <span class="k">return</span> <span class="n">c</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
 <span class="kt">double</span> <span class="n">a</span> <span class="o">=</span> <span class="mf">2.3</span><span class="p">;</span>
 <span class="kt">double</span> <span class="n">b</span> <span class="o">=</span> <span class="mf">6.7</span><span class="p">;</span>
 <span class="n">future</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">fu</span> <span class="o">=</span> <span class="n">async</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span><span class="c1">//创建异步线程线程，并将线程的执行结果用fu占位；</span>
 <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"正在进行计算"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
 <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"计算结果马上就准备好，请您耐心等待"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
 <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"计算结果："</span> <span class="o">&lt;&lt;</span> <span class="n">fu</span><span class="p">.</span><span class="n">get</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span><span class="c1">//阻塞主线程，直至异步线程return</span>
        <span class="c1">//cout &lt;&lt; "计算结果：" &lt;&lt; fu.get() &lt;&lt; endl;//取消该语句注释后运行会报错，因为future对象的get()方法只能调用一次。</span>
 <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Output:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>正在进行计算
计算结果马上就准备好，请您耐心等待
计算结果：9
</code></pre></div></div>]]></content><author><name></name></author><category term="cpp"/><category term="cpp"/><summary type="html"><![CDATA[async]]></summary></entry><entry><title type="html">cpp thread local</title><link href="https://bilyz98.github.io/blog/2024/cpp-thread-local/" rel="alternate" type="text/html" title="cpp thread local"/><published>2024-08-05T11:59:00+00:00</published><updated>2024-08-05T11:59:00+00:00</updated><id>https://bilyz98.github.io/blog/2024/cpp-thread-local</id><content type="html" xml:base="https://bilyz98.github.io/blog/2024/cpp-thread-local/"><![CDATA[<p><a href="https://github.com/muluoleiguo/interview/blob/master/%E9%9D%A2%E8%AF%95/c%2B%2B%E5%B9%B6%E5%8F%91/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8.md">thread-local</a></p> <p>When to use thread local?</p> <p>When you want to store data that is unique to each thread, you can use thread local storage. This is useful when you want to store data that is global to a thread, but not global to the entire program. For example, you might want to store a counter that is unique to each thread, or a pointer to a resource that is unique to each thread.</p> <p>Usually each thread uses thread local when there are multiple function calls in each thread and each function call needs to access the same data.</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;thread&gt;</span><span class="cp">
</span>
<span class="kt">void</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">thread_local</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="c1">// static thread_local int count = 0; // 两种写法等价！</span>
    <span class="n">count</span> <span class="o">+=</span> <span class="n">n</span><span class="p">;</span>
    <span class="c1">// 休眠n秒，防止输出时数据交错（Mac会出现）</span>
    <span class="n">std</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">seconds</span><span class="p">(</span><span class="n">n</span><span class="p">));</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">get_id</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="s">":"</span><span class="o">&lt;&lt;</span><span class="n">count</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">td</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">td</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="p">(</span><span class="n">add</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">td</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">join</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Output:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>23456242050624:1
23456239949376:2
</code></pre></div></div> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;thread&gt;</span><span class="cp">
</span>
<span class="k">class</span> <span class="nc">A</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">void</span> <span class="n">dump</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">id</span><span class="o">&lt;&lt;</span><span class="s">":"</span><span class="o">&lt;&lt;</span><span class="n">count</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="o">::</span><span class="n">id</span> <span class="n">id</span><span class="p">;</span>
    <span class="k">static</span> <span class="k">thread_local</span> <span class="kt">int</span> <span class="n">count</span><span class="p">;</span>
<span class="p">};</span>
<span class="k">thread_local</span> <span class="kt">int</span> <span class="n">A</span><span class="o">::</span><span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">A</span> <span class="n">a</span><span class="p">;</span>
    <span class="n">a</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">get_id</span><span class="p">();</span>
    <span class="n">a</span><span class="p">.</span><span class="n">count</span> <span class="o">+=</span> <span class="n">n</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">seconds</span><span class="p">(</span><span class="n">n</span><span class="p">));</span>
    <span class="n">a</span><span class="p">.</span><span class="n">dump</span><span class="p">();</span>
    <span class="n">A</span> <span class="n">aa</span><span class="p">;</span>
    <span class="n">aa</span><span class="p">.</span><span class="n">dump</span><span class="p">();</span> <span class="c1">// aa 和 a 中的count在同一个线程内相同。</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">td</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">td</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="p">(</span><span class="n">add</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">td</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">join</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Output:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>23456242050624:1
thread::id of a non-executing thread:1
23456239949376:2
thread::id of a non-executing thread:2
</code></pre></div></div>]]></content><author><name></name></author><category term="cpp"/><category term="cpp"/><summary type="html"><![CDATA[thread-local]]></summary></entry><entry><title type="html">micrograd</title><link href="https://bilyz98.github.io/blog/2024/micrograd/" rel="alternate" type="text/html" title="micrograd"/><published>2024-08-05T11:59:00+00:00</published><updated>2024-08-05T11:59:00+00:00</updated><id>https://bilyz98.github.io/blog/2024/micrograd</id><content type="html" xml:base="https://bilyz98.github.io/blog/2024/micrograd/"><![CDATA[<p>What is micrograd?</p> <p>micrograd is a simple implementation of pytorch-like autograd engine built by karparthy.</p> <h2 id="test-code">Test code</h2> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="n">micrograd.engine</span> <span class="kn">import</span> <span class="n">Value</span>

<span class="n">a</span> <span class="o">=</span> <span class="nc">Value</span><span class="p">(</span><span class="mf">4.0</span><span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="nc">Value</span><span class="p">(</span><span class="mf">3.0</span><span class="p">)</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">c</span><span class="p">.</span><span class="n">data</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>

<span class="n">c</span><span class="p">.</span><span class="nf">backward</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">a</span><span class="p">.</span><span class="n">grad</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">b</span><span class="p">.</span><span class="n">grad</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">c</span><span class="p">.</span><span class="n">grad</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <p>The output is quite straightforward:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>12.0000
3.0000
4.0000
1.0000
</code></pre></div></div> <p>However, the grad will accumulate in the value if it’s not set to zero.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">micrograd.engine</span> <span class="kn">import</span> <span class="n">Value</span>

<span class="n">a</span> <span class="o">=</span> <span class="nc">Value</span><span class="p">(</span><span class="mf">4.0</span><span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="nc">Value</span><span class="p">(</span><span class="mf">3.0</span><span class="p">)</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">c</span><span class="p">.</span><span class="n">data</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>

<span class="n">c</span><span class="p">.</span><span class="nf">backward</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">a</span><span class="p">.</span><span class="n">grad</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">b</span><span class="p">.</span><span class="n">grad</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">c</span><span class="p">.</span><span class="n">grad</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>


<span class="c1"># a = Value(4.0)
# b = Value(3.0)
</span><span class="n">d</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
<span class="n">d</span><span class="p">.</span><span class="nf">backward</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">a</span><span class="p">.</span><span class="n">grad</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">b</span><span class="p">.</span><span class="n">grad</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>


</code></pre></div></div> <p>OUtput:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>12.0000
3.0000
4.0000
1.0000
4.0000
5.0000
</code></pre></div></div> <h3 id="internal-implementation">Internal implementation</h3> <p>Please check code in this notebook <a href="https://colab.research.google.com/drive/1KF6houJ-X_uLIgZ5BaSV24-GnYpTQdeh?usp=sharing">micrograd note book</a></p> <p>Some vector based tensor implementation based on micrograd <a href="https://github.com/rohit-krish/Deeplex/tree/main">deeplex</a> <a href="https://github.com/conscell/ugrad">ugrad</a></p>]]></content><author><name></name></author><category term="ml"/><category term="ml"/><category term="pytorch"/><summary type="html"><![CDATA[What is micrograd?]]></summary></entry><entry><title type="html">python dataframe drop row</title><link href="https://bilyz98.github.io/blog/2024/df-drop-row/" rel="alternate" type="text/html" title="python dataframe drop row"/><published>2024-08-04T11:59:00+00:00</published><updated>2024-08-04T11:59:00+00:00</updated><id>https://bilyz98.github.io/blog/2024/df-drop-row</id><content type="html" xml:base="https://bilyz98.github.io/blog/2024/df-drop-row/"><![CDATA[<p>To drop rows from a Pandas DataFrame where a key only appears once, you can use the <code class="language-plaintext highlighter-rouge">groupby</code> and <code class="language-plaintext highlighter-rouge">transform</code> methods. Here’s a simple example:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="c1"># Sample DataFrame
</span><span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">ID</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
        <span class="sh">'</span><span class="s">Value</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">60</span><span class="p">]}</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="c1"># Drop rows where 'ID' appears only once
</span><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">.</span><span class="nf">groupby</span><span class="p">(</span><span class="sh">'</span><span class="s">ID</span><span class="sh">'</span><span class="p">)[</span><span class="sh">'</span><span class="s">ID</span><span class="sh">'</span><span class="p">].</span><span class="nf">transform</span><span class="p">(</span><span class="sh">'</span><span class="s">count</span><span class="sh">'</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">]</span>

<span class="nf">print</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
</code></pre></div></div> <p>This code will keep only the rows where the ‘ID’ appears more than once¹².</p> <p>Would you like more details or help with a different aspect of your DataFrame?</p>]]></content><author><name></name></author><category term="python"/><category term="python"/><summary type="html"><![CDATA[To drop rows from a Pandas DataFrame where a key only appears once, you can use the groupby and transform methods. Here’s a simple example:]]></summary></entry><entry><title type="html">Git merge file from another branch</title><link href="https://bilyz98.github.io/blog/2024/git-merge-file-from-another-branch/" rel="alternate" type="text/html" title="Git merge file from another branch"/><published>2024-07-29T11:59:00+00:00</published><updated>2024-07-29T11:59:00+00:00</updated><id>https://bilyz98.github.io/blog/2024/git-merge-file-from-another-branch</id><content type="html" xml:base="https://bilyz98.github.io/blog/2024/git-merge-file-from-another-branch/"><![CDATA[<ol> <li> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout --patch
</code></pre></div> </div> </li> </ol> <p>Use case: when you want to check out specific part in a file.</p> <p>2. Direct checkout Use case: replace entire file from another branch</p> <ol> <li> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git cherry-pick &lt;commit-hash&gt;
</code></pre></div> </div> </li> </ol> <p>Use case: apply enire commit from another branch to your current branch.</p>]]></content><author><name></name></author><category term="git"/><category term="git"/><summary type="html"><![CDATA[git checkout --patch]]></summary></entry><entry><title type="html">Efficiency tips</title><link href="https://bilyz98.github.io/blog/2024/efficiency-tips/" rel="alternate" type="text/html" title="Efficiency tips"/><published>2024-07-19T11:59:00+00:00</published><updated>2024-07-19T11:59:00+00:00</updated><id>https://bilyz98.github.io/blog/2024/efficiency-tips</id><content type="html" xml:base="https://bilyz98.github.io/blog/2024/efficiency-tips/"><![CDATA[<ul> <li>Do important and urgent things first.</li> <li>Try to avoid urgent and important thing, delegate them if possible.</li> <li>Motivation succeds action , not precedes it. Start doing asap.</li> <li>Try 5mins rule. Just try new things with 5 mins. This helps to ease the mind burden</li> <li>Make decision in advance. <ul> <li>Think about all postive and negative outcomes and come up with solutions.</li> </ul> </li> <li>Difference between research and enginnering <ul> <li>Research is about fail fast and and find the right problem and solution</li> <li>Engineering is about doing execution.</li> </ul> </li> </ul> <p><a href="https://www.youtube.com/live/b33vqX74EcA?si=fC-vlyOsjak_EXtH">https://www.youtube.com/live/b33vqX74EcA?si=fC-vlyOsjak_EXtH</a></p>]]></content><author><name></name></author><category term="tips"/><category term="efficiency"/><category term="tip"/><summary type="html"><![CDATA[Do important and urgent things first. Try to avoid urgent and important thing, delegate them if possible. Motivation succeds action , not precedes it. Start doing asap. Try 5mins rule. Just try new things with 5 mins. This helps to ease the mind burden Make decision in advance. Think about all postive and negative outcomes and come up with solutions. Difference between research and enginnering Research is about fail fast and and find the right problem and solution Engineering is about doing execution.]]></summary></entry><entry><title type="html">Speed up matrix multiplication</title><link href="https://bilyz98.github.io/blog/2024/matrix-multiplication/" rel="alternate" type="text/html" title="Speed up matrix multiplication"/><published>2024-07-12T11:59:00+00:00</published><updated>2024-07-12T11:59:00+00:00</updated><id>https://bilyz98.github.io/blog/2024/matrix-multiplication</id><content type="html" xml:base="https://bilyz98.github.io/blog/2024/matrix-multiplication/"><![CDATA[<p>https://gist.github.com/chris124567/c45d46fdf4d922389641cc9f591ae577</p> <h3 id="naive-matrix-multiplication">Naive matrix multiplication</h3> <p>Code</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">matmul_byhand</span><span class="p">(</span><span class="kt">float</span><span class="o">*</span> <span class="n">input</span><span class="p">,</span> <span class="kt">float</span><span class="o">*</span> <span class="n">weight</span><span class="p">,</span> <span class="kt">float</span><span class="o">*</span> <span class="n">out</span><span class="p">,</span> <span class="kt">int</span> <span class="n">N</span><span class="p">,</span> <span class="kt">int</span> <span class="n">M</span><span class="p">,</span> <span class="kt">int</span> <span class="n">K</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">input_row_idx</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">input_row_idx</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">input_row_idx</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">output_col_idx</span> <span class="o">=</span><span class="mi">0</span> <span class="p">;</span> <span class="n">output_col_idx</span> <span class="o">&lt;</span> <span class="n">K</span><span class="p">;</span> <span class="n">output_col_idx</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kt">float</span> <span class="n">sum</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
      <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">m_idx</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">m_idx</span> <span class="o">&lt;</span> <span class="n">M</span><span class="p">;</span> <span class="n">m_idx</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">input_idx</span> <span class="o">=</span> <span class="n">input_row_idx</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">m_idx</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">weight_idx</span> <span class="o">=</span> <span class="n">m_idx</span> <span class="o">*</span>  <span class="n">K</span>  <span class="o">+</span> <span class="n">output_col_idx</span><span class="p">;</span>
        <span class="n">sum</span> <span class="o">+=</span> <span class="n">input</span><span class="p">[</span><span class="n">input_idx</span><span class="p">]</span> <span class="o">*</span> <span class="n">weight</span><span class="p">[</span><span class="n">weight_idx</span><span class="p">];</span>
      <span class="p">}</span>

      <span class="kt">int</span> <span class="n">out_idx</span> <span class="o">=</span> <span class="n">input_row_idx</span> <span class="o">*</span> <span class="n">K</span> <span class="o">+</span> <span class="n">output_col_idx</span><span class="p">;</span>
      <span class="n">out</span><span class="p">[</span><span class="n">out_idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">sum</span><span class="p">;</span>
    <span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">M</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">K</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
  <span class="kt">float</span> <span class="n">A</span><span class="p">[</span><span class="n">N</span> <span class="o">*</span> <span class="n">M</span><span class="p">];</span>
  <span class="kt">float</span> <span class="n">B</span><span class="p">[</span><span class="n">M</span> <span class="o">*</span> <span class="n">K</span><span class="p">];</span>
  <span class="kt">float</span> <span class="n">C</span><span class="p">[</span><span class="n">N</span> <span class="o">*</span> <span class="n">K</span><span class="p">];</span>

  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span> <span class="o">*</span> <span class="n">M</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">M</span> <span class="o">*</span> <span class="n">K</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="n">matmul</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">N</span><span class="p">,</span> <span class="n">M</span><span class="p">,</span> <span class="n">K</span><span class="p">);</span>

  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">K</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">"%f "</span><span class="p">,</span> <span class="n">C</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="n">K</span> <span class="o">+</span> <span class="n">j</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="n">matmul_byhand</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">N</span><span class="p">,</span> <span class="n">M</span><span class="p">,</span> <span class="n">K</span><span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">K</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">"%f "</span><span class="p">,</span> <span class="n">C</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="n">K</span> <span class="o">+</span> <span class="n">j</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>

<span class="p">}</span>
</code></pre></div></div> <p>Explanation: The most outer loop iterates over the rows of the input matrix.</p> <p>The second outer loop iterates over the columns of the output matrix. The inner loop iterates over the columns of the input matrix and the rows of the weight matrix. The inner loop calculates the dot product of the input row and the weight column and stores the result in the output matrix.</p> <p>Please note that how index of input, weight and output matrix are calculated. <img src="https://github.com/user-attachments/assets/dc21b2cc-20f6-4720-8fbb-5adc7855d4f0" alt="matmul3 drawio"/></p> <p>Output:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>20.000000 23.000000 26.000000 29.000000
56.000000 68.000000 80.000000 92.000000
92.000000 113.000000 134.000000 155.000000
</code></pre></div></div> <p>Issue: Failed to install cuda 12.1.0</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano-gpt) [nsccgz_qylin_1@ln101%tianhe2-K matmul]$ conda install nvidia/label/cuda-12.1.0::cuda-toolkit
Channels:
 - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main
 - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free
 - defaults
 - nvidia/label/cuda-12.1.0
 - conda-forge
 - nvidia
 - pytorch
Platform: linux-64
Collecting package metadata (repodata.json): done
Solving environment: failed

InvalidSpec: The package "nvidia/linux-64::cuda-compiler==12.5.1=0" is not available for the specified platform
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nb">install</span> <span class="nt">-y</span> <span class="nt">-c</span> nvidia <span class="nv">cuda</span><span class="o">=</span>12.1.0 cuda-tools<span class="o">=</span>12.1.0 cuda-toolkit<span class="o">=</span>12.1.0 cuda-version<span class="o">=</span>12.1 cuda-command-line-tools<span class="o">=</span>12.1.0 cuda-compiler<span class="o">=</span>12.1.0 cuda-runtime<span class="o">=</span>12.1.0
</code></pre></div></div>]]></content><author><name></name></author><category term="ml"/><category term="al"/><category term="ml"/><summary type="html"><![CDATA[https://gist.github.com/chris124567/c45d46fdf4d922389641cc9f591ae577]]></summary></entry></feed>