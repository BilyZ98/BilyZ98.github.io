<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://bilyz98.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://bilyz98.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-01-21T14:01:24+00:00</updated><id>https://bilyz98.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Tokenizer</title><link href="https://bilyz98.github.io/blog/2025/tokenizer/" rel="alternate" type="text/html" title="Tokenizer"/><published>2025-01-21T00:00:00+00:00</published><updated>2025-01-21T00:00:00+00:00</updated><id>https://bilyz98.github.io/blog/2025/tokenizer</id><content type="html" xml:base="https://bilyz98.github.io/blog/2025/tokenizer/"><![CDATA[<p>https://sebastianraschka.com/blog/2025/bpe-from-scratch.html</p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Lock Free Queue</title><link href="https://bilyz98.github.io/blog/2025/lock-free-queue/" rel="alternate" type="text/html" title="Lock Free Queue"/><published>2025-01-19T00:00:00+00:00</published><updated>2025-01-19T00:00:00+00:00</updated><id>https://bilyz98.github.io/blog/2025/lock-free-queue</id><content type="html" xml:base="https://bilyz98.github.io/blog/2025/lock-free-queue/"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/-9RJgcpamtXZOFflOkkt5w">lock free queue impl on wechat subscription post</a></p> <h2 id="why-lock-free">Why lock free?</h2> <p>To avoid lock contention between different threads.</p> <h2 id="how-to-implement-it-">How to implement it ?</h2> <h3 id="list-implementation">List implementation</h3>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">nanogpt kv cache first attempt</title><link href="https://bilyz98.github.io/blog/2025/llm-kv-cache-first-attempt/" rel="alternate" type="text/html" title="nanogpt kv cache first attempt"/><published>2025-01-18T11:59:00+00:00</published><updated>2025-01-18T11:59:00+00:00</updated><id>https://bilyz98.github.io/blog/2025/llm-kv-cache-first-attempt</id><content type="html" xml:base="https://bilyz98.github.io/blog/2025/llm-kv-cache-first-attempt/"><![CDATA[<h2 id="1-run-basic-nano-gpt">1. Run basic nano-gpt</h2> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/karpathy/nanoGPT.git

</code></pre></div></div> <p>Install necessary packages</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install -r requirements.txt
</code></pre></div></div> <p>I have these packages in the requirements.txt</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>blobfile==2.0.1
certifi==2022.12.7
charset-normalizer==3.0.1
filelock==3.9.0
idna==3.4
lxml==4.9.2
numpy==1.24.2
pycryptodomex==3.17
pytz==2022.7.1
regex==2022.10.31
requests==2.28.2
tokenizers==0.13.2
torch==2.0.0
typing_extensions==4.4.0
urllib3==1.26.14
torch==2.0.0
numpy==1.24.2
transformers==4.28.1
datasets==2.11.0
tiktoken==0.3.3
wandb==0.14.2
tqdm==4.65.0
</code></pre></div></div> <p>Follow quick start guidance in nanogpt repo do make sure that we can run training and inference successfully.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python data/shakespeare_char/prepare.py
python train.py --compile=False config/train_shakespeare_char.py
python sample.py --out_dir=out-shakespeare-char
</code></pre></div></div> <p>My python version is 3.11 which is too high for model compile so I added <code class="language-plaintext highlighter-rouge">--compile=False</code> in train command.</p> <p>With my A800 gpu, I get a loss 0.0449 after 5000 iteration training.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>iter 4970: loss 0.0461, time 18.12ms, mfu 20.21%
iter 4980: loss 0.0441, time 18.14ms, mfu 20.24%
iter 4990: loss 0.0464, time 18.13ms, mfu 20.27%
step 5000: train loss 0.0383, val loss 4.7262
iter 5000: loss 0.0449, time 3352.84ms, mfu 18.26%
</code></pre></div></div> <h2 id="2-load-gpt-2-models--checkpoints-and-test-performance">2. Load GPT-2 models checkpoints and test performance</h2> <p>https://stackoverflow.com/questions/75110981/sslerror-httpsconnectionpoolhost-huggingface-co-port-443-max-retries-exce</p> <p>proxy error while trying to download gpt2 model from huggingface: <a href="https://github.com/huggingface/transformers/issues/17611">https://github.com/huggingface/transformers/issues/17611</a></p> <p>First downgrad requests version to 2.27.1</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span><span class="nv">requests</span><span class="o">==</span>2.27.1
</code></pre></div></div> <p>And then adding these two lines of code in <code class="language-plaintext highlighter-rouge">train.py</code> and <code class="language-plaintext highlighter-rouge">sample.py</code> fix the proxy connection issue for me</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">'</span><span class="s">CURL_CA_BUNDLE</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="sh">''</span>
<span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">'</span><span class="s">HF_ENDPOINT</span><span class="sh">'</span><span class="p">]</span><span class="o">=</span> <span class="sh">'</span><span class="s">https://hf-mirror.com</span><span class="sh">'</span>
</code></pre></div></div> <p>Run <code class="language-plaintext highlighter-rouge">sample.py</code> to get a test of gpt2 model with params downloaded from huggingface.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> python sample.py --init_from='gpt2'
</code></pre></div></div> <p>I tried to start with “please tell me a joke.” The output is not anything like joke but still very readable.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>please tell me a joke

[…]

My name is Zarek, but I am extremely sad for you.

You can't even come to my house anymore

I'm sorry, I know

I have a dream

I don't know how long this thing will last

My name Is Zarek

I'm an adult who believes that

The problem with your friend is that he doesnt know

He doesn't know how to act
</code></pre></div></div> <p>running time for 10 times inference:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---------------
Elapsed time: 25.4s
</code></pre></div></div> <h2 id="3-implement-kv-cache-for-faster-inference">3. Implement KV cache for faster inference</h2> <p><a href="https://github.com/BilyZ98/nano-gpt-kv-cache/commit/606e4e4e881db6c769e0bdca51bdac96f00a55e1">Commit hisotry for kv cache implementation</a></p> <p>Please check code above for implementation details.</p> <p>Issue:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>shape of past k proj is  torch.Size([1, 12, 946, 64])
shape of k is  torch.Size([1, 12, 44, 64]) shape of v is  torch.Size([1, 12, 44, 64])
q len is  45
shape of past k proj is  torch.Size([1, 12, 990, 64])
shape of k is  torch.Size([1, 12, 45, 64]) shape of v is  torch.Size([1, 12, 45, 64])
Traceback (most recent call last):
  File "/GPUFS/nsccgz_qylin_1/zt/nano-gpt-kv-cache/sample.py", line 93, in &lt;module&gt;
    y = model.generate(x, max_new_tokens, temperature=temperature, top_k=top_k)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/GPUFS/nsccgz_qylin_1/miniconda3/lib/python3.11/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/GPUFS/nsccgz_qylin_1/zt/nano-gpt-kv-cache/model.py", line 359, in generate
    logits, _, past_kv_proj = self(idx_cond, past_kv_proj=past_kv_proj,start_pos=start_pos)
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/GPUFS/nsccgz_qylin_1/miniconda3/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/GPUFS/nsccgz_qylin_1/zt/nano-gpt-kv-cache/model.py", line 204, in forward
    x, layer_kv_proj = block(x, past_kv_proj=past_kv_proj[i])
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/GPUFS/nsccgz_qylin_1/miniconda3/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/GPUFS/nsccgz_qylin_1/zt/nano-gpt-kv-cache/model.py", line 122, in forward
    attn_res, present_kv_proj = self.attn(self.ln_1(x), past_kv_proj=past_kv_proj)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/GPUFS/nsccgz_qylin_1/miniconda3/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/GPUFS/nsccgz_qylin_1/zt/nano-gpt-kv-cache/model.py", line 78, in forward
    assert KV &lt; self.block_size, f"KV: {KV} &gt;= block_size: {self.block_size}"
           ^^^^^^^^^^^^^^^^^^^^
AssertionError: KV: 1035 &gt;= block_size: 1024
yhrun: error: gpu73: task 0: Exited with exit code 1
(nano-gpt-kv-cache) [nsccgz_qylin_1@ln101 nano-gpt-kv-cache]$
</code></pre></div></div> <p>Fix</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">generate</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">idx</span><span class="p">,</span> <span class="n">max_new_tokens</span><span class="p">,</span> <span class="n">temperature</span><span class="o">=</span><span class="mf">1.0</span><span class="p">,</span> <span class="n">top_k</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">max_new_tokens</span><span class="p">):</span>
            <span class="c1"># This is the righ condition
</span>            <span class="k">if</span> <span class="n">idx</span><span class="p">.</span><span class="nf">size</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="o">==</span> <span class="n">T</span><span class="p">:</span>
                <span class="n">idx_cond</span> <span class="o">=</span> <span class="n">idx</span>
                <span class="n">start_pos</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">idx_cond</span> <span class="o">=</span> <span class="n">idx</span><span class="p">[:,</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span>
                <span class="n">start_pos</span> <span class="o">=</span> <span class="n">idx</span><span class="p">.</span><span class="nf">size</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
</code></pre></div></div> <p>The limitation of this code is that it can only handles condition where <code class="language-plaintext highlighter-rouge">max_new_tokens &lt; self.config.block_size</code></p> <p>I don’t know why yet.</p> <h2 id="4-test-kv-cache-performance">4. Test KV cache performance</h2> <p><a href="https://github.com/karpathy/nanoGPT/pull/76">The commit</a> mentions that it only brings performance boost with cpu but not on A100 gpu. Why is that ? Is this because that linear projections can be quickly done with fast gpu matrix multiplication?</p> <p><a href="https://github.com/huggingface/transformers/pull/14118/files">This commit</a> <a href="https://github.com/huggingface/transformers/issues/14033#issuecomment-948385227">and this discussion</a> talks about how to handle long text generation. I have not yet understanded it completely how it deals with long text geneartion.</p> <p>There is a technique called rotary positional embeddings as mentioned in this <a href="https://github.com/karpathy/nanoGPT/pull/76">commit</a>. But I don’t know how does it works yet. And all I want to do right now is to simply test how kv cache helps with inference speed.</p> <p>My naive solution right now is to simply cut past_kv_proj to latest self.config.block_size tokens</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            if past_kv_proj is not None:
                past_k_proj, past_v_proj = past_kv_proj
                print('shape of past k proj is ', past_k_proj.shape )
                print('shape of k is ', k.shape, 'shape of v is ', v.shape)
                if KV &gt;= self.block_size:
                    past_k_proj = past_k_proj[:, :, -self.block_size:, :]
                    past_v_proj = past_v_proj[:, :, -self.block_size:, :]
                k = torch.cat((past_k_proj, k), dim=2)
                v = torch.cat((past_v_proj, v), dim=2)

</code></pre></div></div> <p>5000 tokens , gpu</p> <p>with kv cache, no flash attention</p> <p>time: memory:</p> <p>without kv cache, no flash attention time: memory:</p> <p>500 tokens, cpu</p> <p>with kv cache,</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The law gives the government access to consumer information only if the government's purpose is to provide health care to the general public. If those
---------------
Elapsed time: 218.9s


The law gives the government access to consumer information only if the government's purpose is to provide health care to the general public. If those
---------------
Elapsed time: 251.4s
</code></pre></div></div> <p>without kv cache</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The law gives the government access to consumer information only if the government's purpose is to provide health care to the general public. If those
---------------
Elapsed time: 1191.4s
</code></pre></div></div> <p>5 times inference time saving. Not bad.</p> <h2 id="references">References</h2> <p><a href="https://www.youtube.com/watch?v=80bIUggRJf4&amp;t=247s">youtube video llm kv cache explanation</a></p> <p><a href="https://github.com/karpathy/nanoGPT/pull/246/commits/5cc9bab7e2402caf69a00e9c38fc45517e958748">requirements.txt to run nano-gpt</a></p> <p><a href="https://github.com/karpathy/nanoGPT/pull/76">nano-gpt kv cache pr example</a></p> <p><a href="https://github.com/huggingface/transformers/blob/6bc0fbcfa7acb6ac4937e7456a76c2f7975fefec/src/transformers/modeling_outputs.py#L714">huggingface transformers kv cache source code on github</a></p> <p>https://zhuanlan.zhihu.com/p/646577898</p> <p>https://zhuanlan.zhihu.com/p/624740065</p> <p><a href="https://huggingface.co/docs/transformers/main_classes/output#transformers.modeling_outputs.CausalLMOutputWithPast">huggingface transformers API documentation</a></p>]]></content><author><name></name></author><category term="ml"/><category term="llm"/><category term="ml"/><category term="llm"/><summary type="html"><![CDATA[1. Run basic nano-gpt]]></summary></entry><entry><title type="html">Set up vim in vscode</title><link href="https://bilyz98.github.io/blog/2025/set-up-vim-in-vscode/" rel="alternate" type="text/html" title="Set up vim in vscode"/><published>2025-01-17T11:59:00+00:00</published><updated>2025-01-17T11:59:00+00:00</updated><id>https://bilyz98.github.io/blog/2025/set-up-vim-in-vscode</id><content type="html" xml:base="https://bilyz98.github.io/blog/2025/set-up-vim-in-vscode/"><![CDATA[<h2 id="why-move-to-vscode">Why move to vscode?</h2> <p>Because I want to use copilot in vscode to do code auto complete or function update for many lines at the same time.</p> <p>I use neovim vscode which uses native neovim instead of doing simulation. However, I am not sure if all neovim plugin can be used in vscode or not. I found whichkey on vscode and it works quite well.</p> <p>Not sure if <code class="language-plaintext highlighter-rouge">lazy</code> and telescope can work well at the same time but it does not matter a lot. I can use vscode builtin search to do searching.</p> <h2 id="move-between-editor-and-terminal">Move between editor and terminal</h2> <p><code class="language-plaintext highlighter-rouge">ctrl+\</code>` to move to terminal and toggle/close the terminal window. This is default settings from vscode</p> <p><code class="language-plaintext highlighter-rouge">ctrl+1</code> to move to first editor buffer.</p> <p>check out this stackoverflow for more. <a href="https://stackoverflow.com/questions/42796887/switch-focus-between-editor-and-integrated-terminal">https://stackoverflow.com/questions/42796887/switch-focus-between-editor-and-integrated-terminal</a></p> <h2 id="settingsjson-configuration">settings.json configuration</h2> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"workbench.colorTheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Default Dark Modern"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"svg.preview.mode"</span><span class="p">:</span><span class="w"> </span><span class="s2">"svg"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"remote.SSH.enableRemoteCommand"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"remote.SSH.remotePlatform"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"ctb"</span><span class="p">:</span><span class="w"> </span><span class="s2">"linux"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"th2k"</span><span class="p">:</span><span class="w"> </span><span class="s2">"linux"</span><span class="w">
    </span><span class="p">},</span><span class="w">

    </span><span class="nl">"Codegeex.License"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Codegeex.Privacy"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
    </span><span class="nl">"extensions.experimental.affinity"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"asvetliakov.vscode-neovim"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="nl">"vscode-neovim.neovimInitVimPaths.win32"</span><span class="p">:</span><span class="w"> </span><span class="s2">"C:</span><span class="se">\\</span><span class="s2">Users</span><span class="se">\\</span><span class="s2">zhutaozhuang</span><span class="se">\\</span><span class="s2">nvim_config</span><span class="se">\\</span><span class="s2">init.lua"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"vim.neovimConfigPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"C:</span><span class="se">\\</span><span class="s2">Users</span><span class="se">\\</span><span class="s2">zhutaozhuang</span><span class="se">\\</span><span class="s2">nvim_config</span><span class="se">\\</span><span class="s2">init.lua"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"vim.neovimPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"C:</span><span class="se">\\</span><span class="s2">Program Files</span><span class="se">\\</span><span class="s2">Neovim</span><span class="se">\\</span><span class="s2">bin</span><span class="se">\\</span><span class="s2">nvim.exe"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"vim.enableNeovim"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"vim.neovimUseConfigFile"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"vscode-neovim.neovimInitVimPaths.win32"</span><span class="p">:</span><span class="w"> </span><span class="s2">"C:</span><span class="se">\\</span><span class="s2">Users</span><span class="se">\\</span><span class="s2">zhutaozhuang</span><span class="se">\\</span><span class="s2">nvim_config</span><span class="se">\\</span><span class="s2">init.lua"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"terminal.integrated.sendKeybindingsToShell"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"accessibility.verbosity.keybindingsEditor"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
    </span><span class="nl">"workbench.settings.openDefaultKeybindings"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"workbench.activityBar.location"</span><span class="p">:</span><span class="w"> </span><span class="s2">"hidden"</span><span class="p">,</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h2 id="keybindingsjson">keybindings.json</h2> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">//</span><span class="w"> </span><span class="err">Place</span><span class="w"> </span><span class="err">your</span><span class="w"> </span><span class="err">key</span><span class="w"> </span><span class="err">bindings</span><span class="w"> </span><span class="err">in</span><span class="w"> </span><span class="err">this</span><span class="w"> </span><span class="err">file</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">override</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">defaults</span><span class="w">
</span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+j"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.navigateBackInEditLocations"</span><span class="p">,</span><span class="w">
        </span><span class="err">//</span><span class="w"> </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.quickOpenNavigatePrevious"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editorFocus"</span><span class="w">
        </span><span class="err">//</span><span class="w"> </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"inQuickOpen"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+q"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.closeEditorsInGroup"</span><span class="p">,</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">//</span><span class="w">     </span><span class="nl">"key"</span><span class="p">:</span><span class="w">     </span><span class="s2">"ctrl+`"</span><span class="p">,</span><span class="w">
    </span><span class="err">//</span><span class="w">     </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.terminal.focus"</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">//</span><span class="w">     </span><span class="nl">"key"</span><span class="p">:</span><span class="w">     </span><span class="s2">"ctrl+`"</span><span class="p">,</span><span class="w">
    </span><span class="err">//</span><span class="w">     </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.focusActiveEditorGroup"</span><span class="p">,</span><span class="w">
    </span><span class="err">//</span><span class="w">     </span><span class="nl">"when"</span><span class="p">:</span><span class="w">    </span><span class="s2">"terminalFocus"</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">//</span><span class="w">     </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+]"</span><span class="p">,</span><span class="w">
    </span><span class="err">//</span><span class="w">     </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.terminal.clear"</span><span class="p">,</span><span class="w">
    </span><span class="err">//</span><span class="w">     </span><span class="err">//</span><span class="w"> </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.terminal.toggleTerminal"</span><span class="p">,</span><span class="w">

    </span><span class="err">//</span><span class="w">      </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"terminal.active"</span><span class="w"> 
    </span><span class="err">//</span><span class="w"> </span><span class="p">}</span><span class="w">

    </span><span class="err">/*</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"vscode-neovim.compositeEscape1"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"j"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"neovim.mode == insert &amp;&amp; editorTextFocus"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"args"</span><span class="p">:</span><span class="w"> </span><span class="s2">"j"</span><span class="w">

    </span><span class="p">}</span><span class="w"> </span><span class="err">*/</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div> <h2 id="initlua-configuration">init.lua configuration</h2> <div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">vim</span><span class="p">.</span><span class="n">g</span><span class="p">.</span><span class="n">vscode</span> <span class="k">then</span>
    <span class="c1">-- VSCode extension</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">"Running in VSCode"</span><span class="p">)</span>
    <span class="c1">-- set leader key to space</span>
    <span class="n">vim</span><span class="p">.</span><span class="n">g</span><span class="p">.</span><span class="n">mapleader</span> <span class="o">=</span> <span class="s1">' '</span>

    <span class="n">vim</span><span class="p">.</span><span class="n">cmd</span><span class="p">(</span><span class="s1">'nmap &lt;leader&gt;c :e C:\\Users\\zhutaozhuang\\nvim_config\\init.lua&lt;cr&gt;'</span><span class="p">)</span>
    
    <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s1">'n'</span><span class="p">,</span> <span class="s1">'&lt;Esc&gt;'</span><span class="p">,</span> <span class="s1">':nohlsearch&lt;CR&gt;'</span><span class="p">,</span> <span class="p">{</span> <span class="n">noremap</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span> <span class="n">silent</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">})</span>
    
    <span class="c1">-- go to left side buffer </span>
    <span class="c1">-- vim.keymap.set('n', '&lt;S-h&gt;', '', { noremap = true, silent = true })</span>
    <span class="c1">-- vim.keymap.set('n', '&lt;S-l&gt;', ':bnext', { noremap = true, silent = true })</span>
    <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s1">'n'</span><span class="p">,</span> <span class="s1">'&lt;S-h&gt;'</span><span class="p">,</span> <span class="s1">':bprevious&lt;CR&gt;'</span><span class="p">,</span> <span class="p">{</span> <span class="n">noremap</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span> <span class="n">silent</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">})</span>
    <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s1">'n'</span><span class="p">,</span> <span class="s1">'&lt;S-l&gt;'</span><span class="p">,</span> <span class="s1">':bnext&lt;CR&gt;'</span><span class="p">,</span> <span class="p">{</span> <span class="n">noremap</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span> <span class="n">silent</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">})</span>
    <span class="c1">-- vim.keymap.set('n', '&lt;S-h&gt;', '^', { noremap = true, silent = true })</span>
    <span class="c1">-- vim.keymap.set('n', '&lt;S-l&gt;', '$', { noremap = true, silent = true })</span>
    <span class="c1">--</span>
    <span class="c1">-- go to right window with Ctrl-l</span>
    <span class="n">vim</span><span class="p">.</span><span class="n">api</span><span class="p">.</span><span class="n">nvim_set_keymap</span><span class="p">(</span><span class="s1">'n'</span><span class="p">,</span> <span class="s1">'&lt;C-l&gt;'</span><span class="p">,</span> <span class="s1">':call VSCodeNotify("workbench.action.navigateRight")&lt;CR&gt;'</span><span class="p">,</span> <span class="p">{</span> <span class="n">noremap</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span> <span class="n">silent</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">})</span>
    <span class="n">vim</span><span class="p">.</span><span class="n">api</span><span class="p">.</span><span class="n">nvim_set_keymap</span><span class="p">(</span><span class="s1">'n'</span><span class="p">,</span> <span class="s1">'&lt;C-h&gt;'</span><span class="p">,</span> <span class="s1">':call VSCodeNotify("workbench.action.navigateLeft")&lt;CR&gt;'</span><span class="p">,</span> <span class="p">{</span> <span class="n">noremap</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span> <span class="n">silent</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">})</span>


    <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s1">'n'</span><span class="p">,</span> <span class="s1">'&lt;ctrl-q&gt;'</span><span class="p">,</span> <span class="s1">':q&lt;CR&gt;'</span><span class="p">,</span> <span class="p">{</span> <span class="n">noremap</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span> <span class="n">silent</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">})</span>

    <span class="n">vim</span><span class="p">.</span><span class="n">opt</span><span class="p">.</span><span class="n">ignorecase</span> <span class="o">=</span> <span class="kc">true</span>

    <span class="c1">-- search file after pressing f after pressing leader key, use vscode command</span>
    

    <span class="kd">local</span> <span class="n">whichkey</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">show</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"whichkey.show"</span><span class="p">)</span>
        <span class="k">end</span>
      <span class="p">}</span>
      
      <span class="kd">local</span> <span class="n">comment</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">selected</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotifyRange</span><span class="p">(</span><span class="s2">"editor.action.commentLine"</span><span class="p">,</span> <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">line</span><span class="p">(</span><span class="s2">"v"</span><span class="p">),</span> <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">line</span><span class="p">(</span><span class="s2">"."</span><span class="p">),</span> <span class="mi">1</span><span class="p">)</span>
        <span class="k">end</span>
      <span class="p">}</span>
      
      <span class="kd">local</span> <span class="n">file</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">new</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"workbench.explorer.fileView.focus"</span><span class="p">)</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"explorer.newFile"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
      
        <span class="n">save</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"workbench.action.files.save"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
      
        <span class="n">saveAll</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"workbench.action.files.saveAll"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
      
        <span class="n">format</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"editor.action.formatDocument"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
      
        <span class="n">showInExplorer</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"workbench.files.action.showActiveFileInExplorer"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
      
        <span class="n">rename</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"workbench.files.action.showActiveFileInExplorer"</span><span class="p">)</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"renameFile"</span><span class="p">)</span>
        <span class="k">end</span>
      <span class="p">}</span>
      
      <span class="kd">local</span> <span class="nb">error</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">list</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"workbench.actions.view.problems"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="nb">next</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"editor.action.marker.next"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="n">previous</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"editor.action.marker.prev"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
      <span class="p">}</span>
      
      <span class="kd">local</span> <span class="n">editor</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">closeActive</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"workbench.action.closeActiveEditor"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
      
        <span class="n">closeOther</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"workbench.action.closeOtherEditors"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
      
        <span class="n">organizeImport</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"editor.action.organizeImports"</span><span class="p">)</span>
        <span class="k">end</span>
      <span class="p">}</span>
      
      <span class="kd">local</span> <span class="n">workbench</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">showCommands</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"workbench.action.showCommands"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="n">previousEditor</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"workbench.action.previousEditor"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="n">nextEditor</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"workbench.action.nextEditor"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
      <span class="p">}</span>
      
      <span class="kd">local</span> <span class="n">terminal</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">toggle_panel</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"workbench.action.terminal.toggleTerminal"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
      <span class="p">}</span>
      
      <span class="kd">local</span> <span class="n">toggle</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">toggleActivityBar</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"workbench.action.toggleActivityBarVisibility"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="n">toggleSideBarVisibility</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"workbench.action.toggleSidebarVisibility"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="n">toggleZenMode</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"workbench.action.toggleZenMode"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="n">theme</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"workbench.action.selectTheme"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
      <span class="p">}</span>
      
      <span class="kd">local</span> <span class="n">symbol</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">rename</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"editor.action.rename"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
      <span class="p">}</span>
      
      <span class="c1">-- if bookmark extension is used</span>
      <span class="kd">local</span> <span class="n">bookmark</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">toggle</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"bookmarks.toggle"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="n">list</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"bookmarks.list"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="n">previous</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"bookmarks.jumpToPrevious"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="nb">next</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"bookmarks.jumpToNext"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
      <span class="p">}</span>
      
      <span class="kd">local</span> <span class="n">search</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">reference</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"editor.action.referenceSearch.trigger"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="n">referenceInSideBar</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"references-view.find"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="n">project</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"editor.action.addSelectionToNextFindMatch"</span><span class="p">)</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"workbench.action.findInFiles"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="n">text</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"workbench.action.findInFiles"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
      <span class="p">}</span>
      
      <span class="kd">local</span> <span class="n">project</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">findFile</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"workbench.action.quickOpen"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="n">switch</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"workbench.action.openRecent"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="n">tree</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"workbench.view.explorer"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
      <span class="p">}</span>
      
      <span class="kd">local</span> <span class="n">git</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">init</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"git.init"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="n">status</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"workbench.view.scm"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="n">switch</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"git.checkout"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="n">deleteBranch</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"git.deleteBranch"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="n">push</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"git.push"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="n">pull</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"git.pull"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="n">fetch</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"git.fetch"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="n">commit</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"git.commit"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="n">publish</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"git.publish"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
      
        <span class="c1">-- if gitlens installed</span>
        <span class="n">graph</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"gitlens.showGraphPage"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
      <span class="p">}</span>
      
      <span class="kd">local</span> <span class="n">fold</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">toggle</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"editor.toggleFold"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
      
        <span class="n">all</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"editor.foldAll"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="n">openAll</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"editor.unfoldAll"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
      
        <span class="n">close</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"editor.fold"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="n">open</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"editor.unfold"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="n">openRecursive</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"editor.unfoldRecursively"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
      
        <span class="n">blockComment</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"editor.foldAllBlockComments"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
      
        <span class="n">allMarkerRegion</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"editor.foldAllMarkerRegions"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="n">openAllMarkerRegion</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"editor.unfoldAllMarkerRegions"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
      <span class="p">}</span>
      
      <span class="kd">local</span> <span class="n">vscode</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">focusEditor</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"workbench.action.focusActiveEditorGroup"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="n">moveSideBarRight</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"workbench.action.moveSideBarRight"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
        <span class="n">moveSideBarLeft</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"workbench.action.moveSideBarLeft"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
      <span class="p">}</span>
      
      <span class="kd">local</span> <span class="n">refactor</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">showMenu</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
          <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">VSCodeNotify</span><span class="p">(</span><span class="s2">"editor.action.refactor"</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span>
      <span class="p">}</span>
      
      <span class="c1">-- https://vi.stackexchange.com/a/31887</span>
      <span class="kd">local</span> <span class="n">nv_keymap</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="n">lhs</span><span class="p">,</span> <span class="n">rhs</span><span class="p">)</span>
        <span class="n">vim</span><span class="p">.</span><span class="n">api</span><span class="p">.</span><span class="n">nvim_set_keymap</span><span class="p">(</span><span class="s1">'n'</span><span class="p">,</span> <span class="n">lhs</span><span class="p">,</span> <span class="n">rhs</span><span class="p">,</span> <span class="p">{</span> <span class="n">noremap</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span> <span class="n">silent</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">})</span>
        <span class="n">vim</span><span class="p">.</span><span class="n">api</span><span class="p">.</span><span class="n">nvim_set_keymap</span><span class="p">(</span><span class="s1">'v'</span><span class="p">,</span> <span class="n">lhs</span><span class="p">,</span> <span class="n">rhs</span><span class="p">,</span> <span class="p">{</span> <span class="n">noremap</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span> <span class="n">silent</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">})</span>
      <span class="k">end</span>
      
      <span class="kd">local</span> <span class="n">nx_keymap</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="n">lhs</span><span class="p">,</span> <span class="n">rhs</span><span class="p">)</span>
        <span class="n">vim</span><span class="p">.</span><span class="n">api</span><span class="p">.</span><span class="n">nvim_set_keymap</span><span class="p">(</span><span class="s1">'n'</span><span class="p">,</span> <span class="n">lhs</span><span class="p">,</span> <span class="n">rhs</span><span class="p">,</span> <span class="p">{</span> <span class="n">silent</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">})</span>
        <span class="n">vim</span><span class="p">.</span><span class="n">api</span><span class="p">.</span><span class="n">nvim_set_keymap</span><span class="p">(</span><span class="s1">'v'</span><span class="p">,</span> <span class="n">lhs</span><span class="p">,</span> <span class="n">rhs</span><span class="p">,</span> <span class="p">{</span> <span class="n">silent</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">})</span>
      <span class="k">end</span>
      
      <span class="c1">--#region keymap</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">g</span><span class="p">.</span><span class="n">mapleader</span> <span class="o">=</span> <span class="s2">" "</span>
      
      <span class="n">nv_keymap</span><span class="p">(</span><span class="s1">'s'</span><span class="p">,</span> <span class="s1">'}'</span><span class="p">)</span>
      <span class="n">nv_keymap</span><span class="p">(</span><span class="s1">'S'</span><span class="p">,</span> <span class="s1">'{'</span><span class="p">)</span>
      
      <span class="n">nv_keymap</span><span class="p">(</span><span class="s1">'&lt;leader&gt;h'</span><span class="p">,</span> <span class="s1">'^'</span><span class="p">)</span>
      <span class="n">nv_keymap</span><span class="p">(</span><span class="s1">'&lt;leader&gt;l'</span><span class="p">,</span> <span class="s1">'$'</span><span class="p">)</span>
      <span class="n">nv_keymap</span><span class="p">(</span><span class="s1">'&lt;leader&gt;a'</span><span class="p">,</span> <span class="s1">'%'</span><span class="p">)</span>
      
      <span class="n">nx_keymap</span><span class="p">(</span><span class="s1">'j'</span><span class="p">,</span> <span class="s1">'gj'</span><span class="p">)</span>
      <span class="n">nx_keymap</span><span class="p">(</span><span class="s1">'k'</span><span class="p">,</span> <span class="s1">'gk'</span><span class="p">)</span>
      
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span><span class="p">,</span> <span class="s1">'v'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;"</span><span class="p">,</span> <span class="n">whichkey</span><span class="p">.</span><span class="n">show</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span><span class="p">,</span> <span class="s1">'v'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;/"</span><span class="p">,</span> <span class="n">comment</span><span class="p">.</span><span class="n">selected</span><span class="p">)</span>
      
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;i"</span><span class="p">,</span> <span class="n">editor</span><span class="p">.</span><span class="n">organizeImport</span><span class="p">)</span>
      
      <span class="c1">-- no highlight</span>
      <span class="c1">-- vim.keymap.set({ 'n' }, "&lt;leader&gt;n", "&lt;cmd&gt;noh&lt;cr&gt;")</span>
      
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span><span class="p">,</span> <span class="s1">'v'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt; "</span><span class="p">,</span> <span class="n">workbench</span><span class="p">.</span><span class="n">showCommands</span><span class="p">)</span>
      
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span><span class="p">,</span> <span class="s1">'v'</span> <span class="p">},</span> <span class="s2">"H"</span><span class="p">,</span> <span class="n">workbench</span><span class="p">.</span><span class="n">previousEditor</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span><span class="p">,</span> <span class="s1">'v'</span> <span class="p">},</span> <span class="s2">"L"</span><span class="p">,</span> <span class="n">workbench</span><span class="p">.</span><span class="n">nextEditor</span><span class="p">)</span>
      
      <span class="c1">-- error</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;el"</span><span class="p">,</span> <span class="n">error</span><span class="p">.</span><span class="n">list</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;en"</span><span class="p">,</span> <span class="n">error</span><span class="p">.</span><span class="n">next</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;ep"</span><span class="p">,</span> <span class="n">error</span><span class="p">.</span><span class="n">previous</span><span class="p">)</span>
      
      <span class="c1">-- git</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;gb"</span><span class="p">,</span> <span class="n">git</span><span class="p">.</span><span class="n">switch</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;gi"</span><span class="p">,</span> <span class="n">git</span><span class="p">.</span><span class="n">init</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;gd"</span><span class="p">,</span> <span class="n">git</span><span class="p">.</span><span class="n">deleteBranch</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;gf"</span><span class="p">,</span> <span class="n">git</span><span class="p">.</span><span class="n">fetch</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;gs"</span><span class="p">,</span> <span class="n">git</span><span class="p">.</span><span class="n">status</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;gp"</span><span class="p">,</span> <span class="n">git</span><span class="p">.</span><span class="n">pull</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;gg"</span><span class="p">,</span> <span class="n">git</span><span class="p">.</span><span class="n">graph</span><span class="p">)</span>
      
      <span class="c1">-- project</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;f"</span><span class="p">,</span> <span class="n">project</span><span class="p">.</span><span class="n">findFile</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;pp"</span><span class="p">,</span> <span class="n">project</span><span class="p">.</span><span class="n">switch</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;pt"</span><span class="p">,</span> <span class="n">project</span><span class="p">.</span><span class="n">tree</span><span class="p">)</span>
      
      <span class="c1">-- file</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span><span class="p">,</span> <span class="s1">'v'</span> <span class="p">},</span> <span class="s2">"&lt;space&gt;w"</span><span class="p">,</span> <span class="n">file</span><span class="p">.</span><span class="n">save</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span><span class="p">,</span> <span class="s1">'v'</span> <span class="p">},</span> <span class="s2">"&lt;space&gt;wa"</span><span class="p">,</span> <span class="n">file</span><span class="p">.</span><span class="n">saveAll</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span><span class="p">,</span> <span class="s1">'v'</span> <span class="p">},</span> <span class="s2">"&lt;space&gt;fs"</span><span class="p">,</span> <span class="n">file</span><span class="p">.</span><span class="n">save</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span><span class="p">,</span> <span class="s1">'v'</span> <span class="p">},</span> <span class="s2">"&lt;space&gt;fS"</span><span class="p">,</span> <span class="n">file</span><span class="p">.</span><span class="n">saveAll</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;space&gt;ff"</span><span class="p">,</span> <span class="n">file</span><span class="p">.</span><span class="n">format</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;space&gt;fn"</span><span class="p">,</span> <span class="n">file</span><span class="p">.</span><span class="n">new</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;space&gt;ft"</span><span class="p">,</span> <span class="n">file</span><span class="p">.</span><span class="n">showInExplorer</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;space&gt;fr"</span><span class="p">,</span> <span class="n">file</span><span class="p">.</span><span class="n">rename</span><span class="p">)</span>
      
      <span class="c1">-- buffer/editor</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span><span class="p">,</span> <span class="s1">'v'</span> <span class="p">},</span> <span class="s2">"&lt;space&gt;c"</span><span class="p">,</span> <span class="n">editor</span><span class="p">.</span><span class="n">closeActive</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span><span class="p">,</span> <span class="s1">'v'</span> <span class="p">},</span> <span class="s2">"&lt;space&gt;bc"</span><span class="p">,</span> <span class="n">editor</span><span class="p">.</span><span class="n">closeActive</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span><span class="p">,</span> <span class="s1">'v'</span> <span class="p">},</span> <span class="s2">"&lt;space&gt;k"</span><span class="p">,</span> <span class="n">editor</span><span class="p">.</span><span class="n">closeOther</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span><span class="p">,</span> <span class="s1">'v'</span> <span class="p">},</span> <span class="s2">"&lt;space&gt;bk"</span><span class="p">,</span> <span class="n">editor</span><span class="p">.</span><span class="n">closeOther</span><span class="p">)</span>
      
      <span class="c1">-- toggle</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span><span class="p">,</span> <span class="s1">'v'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;ta"</span><span class="p">,</span> <span class="n">toggle</span><span class="p">.</span><span class="n">toggleActivityBar</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span><span class="p">,</span> <span class="s1">'v'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;tz"</span><span class="p">,</span> <span class="n">toggle</span><span class="p">.</span><span class="n">toggleZenMode</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span><span class="p">,</span> <span class="s1">'v'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;ts"</span><span class="p">,</span> <span class="n">toggle</span><span class="p">.</span><span class="n">toggleSideBarVisibility</span><span class="p">)</span>
      <span class="c1">-- vim.keymap.set({ 'n', 'v' }, "&lt;leader&gt;tt", toggle.theme)</span>
      <span class="c1">-- </span>

      <span class="c1">-- toggle terminal</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span><span class="p">,</span> <span class="s1">'v'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;tt"</span><span class="p">,</span> <span class="n">terminal</span><span class="p">.</span><span class="n">toggle_panel</span><span class="p">)</span>
      
      <span class="c1">-- refactor</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'v'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;r"</span><span class="p">,</span> <span class="n">refactor</span><span class="p">.</span><span class="n">showMenu</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;rr"</span><span class="p">,</span> <span class="n">symbol</span><span class="p">.</span><span class="n">rename</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">api</span><span class="p">.</span><span class="n">nvim_set_keymap</span><span class="p">(</span><span class="s1">'n'</span><span class="p">,</span> <span class="s1">'&lt;leader&gt;rd'</span><span class="p">,</span> <span class="s1">'V%d'</span><span class="p">,</span> <span class="p">{</span> <span class="n">silent</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">})</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">api</span><span class="p">.</span><span class="n">nvim_set_keymap</span><span class="p">(</span><span class="s1">'n'</span><span class="p">,</span> <span class="s1">'&lt;leader&gt;rv'</span><span class="p">,</span> <span class="s1">'V%'</span><span class="p">,</span> <span class="p">{</span> <span class="n">silent</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">})</span>
      
      <span class="c1">-- bookmark</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;m"</span><span class="p">,</span> <span class="n">bookmark</span><span class="p">.</span><span class="n">toggle</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;mt"</span><span class="p">,</span> <span class="n">bookmark</span><span class="p">.</span><span class="n">toggle</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;ml"</span><span class="p">,</span> <span class="n">bookmark</span><span class="p">.</span><span class="n">list</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;mn"</span><span class="p">,</span> <span class="n">bookmark</span><span class="p">.</span><span class="n">next</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;mp"</span><span class="p">,</span> <span class="n">bookmark</span><span class="p">.</span><span class="n">previous</span><span class="p">)</span>
      
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;sr"</span><span class="p">,</span> <span class="n">search</span><span class="p">.</span><span class="n">reference</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;sR"</span><span class="p">,</span> <span class="n">search</span><span class="p">.</span><span class="n">referenceInSideBar</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;sp"</span><span class="p">,</span> <span class="n">search</span><span class="p">.</span><span class="n">project</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;st"</span><span class="p">,</span> <span class="n">search</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
      
      <span class="c1">-- vscode</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;ve"</span><span class="p">,</span> <span class="n">vscode</span><span class="p">.</span><span class="n">focusEditor</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;vl"</span><span class="p">,</span> <span class="n">vscode</span><span class="p">.</span><span class="n">moveSideBarLeft</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;vr"</span><span class="p">,</span> <span class="n">vscode</span><span class="p">.</span><span class="n">moveSideBarRight</span><span class="p">)</span>
      
      <span class="c1">--folding</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;zr"</span><span class="p">,</span> <span class="n">fold</span><span class="p">.</span><span class="n">openAll</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;zO"</span><span class="p">,</span> <span class="n">fold</span><span class="p">.</span><span class="n">openRecursive</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;zo"</span><span class="p">,</span> <span class="n">fold</span><span class="p">.</span><span class="n">open</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;zm"</span><span class="p">,</span> <span class="n">fold</span><span class="p">.</span><span class="n">all</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;zb"</span><span class="p">,</span> <span class="n">fold</span><span class="p">.</span><span class="n">blockComment</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;zc"</span><span class="p">,</span> <span class="n">fold</span><span class="p">.</span><span class="n">close</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;zg"</span><span class="p">,</span> <span class="n">fold</span><span class="p">.</span><span class="n">allMarkerRegion</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;zG"</span><span class="p">,</span> <span class="n">fold</span><span class="p">.</span><span class="n">openAllMarkerRegion</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"&lt;leader&gt;za"</span><span class="p">,</span> <span class="n">fold</span><span class="p">.</span><span class="n">toggle</span><span class="p">)</span>
      
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"zr"</span><span class="p">,</span> <span class="n">fold</span><span class="p">.</span><span class="n">openAll</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"zO"</span><span class="p">,</span> <span class="n">fold</span><span class="p">.</span><span class="n">openRecursive</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"zo"</span><span class="p">,</span> <span class="n">fold</span><span class="p">.</span><span class="n">open</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"zm"</span><span class="p">,</span> <span class="n">fold</span><span class="p">.</span><span class="n">all</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"zb"</span><span class="p">,</span> <span class="n">fold</span><span class="p">.</span><span class="n">blockComment</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"zc"</span><span class="p">,</span> <span class="n">fold</span><span class="p">.</span><span class="n">close</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"zg"</span><span class="p">,</span> <span class="n">fold</span><span class="p">.</span><span class="n">allMarkerRegion</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"zG"</span><span class="p">,</span> <span class="n">fold</span><span class="p">.</span><span class="n">openAllMarkerRegion</span><span class="p">)</span>
      <span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">'n'</span> <span class="p">},</span> <span class="s2">"za"</span><span class="p">,</span> <span class="n">fold</span><span class="p">.</span><span class="n">toggle</span><span class="p">)</span>
      <span class="c1">--#endregion keymap</span>
      
<span class="k">else</span>

    <span class="c1">-- ordinary Neovim</span>
    <span class="c1">-- set leader key to space</span>
    <span class="n">vim</span><span class="p">.</span><span class="n">g</span><span class="p">.</span><span class="n">mapleader</span> <span class="o">=</span> <span class="s2">" "</span>
    <span class="n">vim</span><span class="p">.</span><span class="n">g</span><span class="p">.</span><span class="n">maplocalleader</span> <span class="o">=</span> <span class="s2">" "</span>
    
    <span class="c1">-- search file after pressing f after pressing leader key, use Telescope</span>
    <span class="n">vim</span><span class="p">.</span><span class="n">api</span><span class="p">.</span><span class="n">nvim_set_keymap</span><span class="p">(</span><span class="s1">'n'</span><span class="p">,</span> <span class="s1">'&lt;leader&gt;f'</span><span class="p">,</span> <span class="s1">':Telescope find_files&lt;CR&gt;'</span><span class="p">,</span> <span class="p">{</span> <span class="n">noremap</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span> <span class="n">silent</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">})</span>
<span class="k">end</span>

</code></pre></div></div> <p>[ssh to remote node in vscode from wsl]https://stackoverflow.com/questions/60150466/can-i-ssh-from-wsl-in-visual-studio-code</p> <p><a href="https://github.com/sokhuong-uon/vscode-nvim/blob/main/init.lua">example init.lua for vscode nvm config</a></p> <p>https://www.youtube.com/watch?v=GST8we5uABo&amp;t=426s</p> <p>https://medium.com/@nikmas_dev/vscode-neovim-setup-keyboard-centric-powerful-reliable-clean-and-aesthetic-development-582d34297985</p> <p>https://www.youtube.com/watch?v=z64gxcKQSRI&amp;list=PLXDouhCU5r6qRE46qQ2rYIPnbJ5a9jzmd&amp;index=2</p> <p>https://www.youtube.com/watch?v=A5b2GxG-6do</p>]]></content><author><name></name></author><category term="development"/><category term="vscode"/><category term="vim"/><summary type="html"><![CDATA[Why move to vscode? Because I want to use copilot in vscode to do code auto complete or function update for many lines at the same time.]]></summary></entry><entry><title type="html">chibicc - Simple c compiler if statement</title><link href="https://bilyz98.github.io/blog/2025/chibicc-if-statement/" rel="alternate" type="text/html" title="chibicc - Simple c compiler if statement"/><published>2025-01-14T11:59:00+00:00</published><updated>2025-01-14T11:59:00+00:00</updated><id>https://bilyz98.github.io/blog/2025/chibicc-if-statement</id><content type="html" xml:base="https://bilyz98.github.io/blog/2025/chibicc-if-statement/"><![CDATA[<p><a href="https://github.com/BilyZ98/chibicc/commit/2f132cf8e68f0adf92bae038b75ea6da425e223c">Commit history for if statement feature</a></p> <h2 id="what-is-changed-">What is changed ?</h2> <p>For parser, new node type called <code class="language-plaintext highlighter-rouge">ND_IF</code> is introduced. Three new nodes are introduced for <code class="language-plaintext highlighter-rouge">Node</code> type in parser. They are called <code class="language-plaintext highlighter-rouge">cond</code>, <code class="language-plaintext highlighter-rouge">then</code>, <code class="language-plaintext highlighter-rouge">els</code> which corresponds to code in <code class="language-plaintext highlighter-rouge">if(cond){ } else {}</code>. New production rule is introduced to deal with <code class="language-plaintext highlighter-rouge">if</code> statement</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// stmt = "return" expr ";" </span>
<span class="c1">//        | "{" compound_stmt</span>
<span class="c1">//        | expr_stmt</span>
<span class="c1">//        | "if" "(" expr ")" stmt ("else" stmt)?</span>
<span class="k">static</span> <span class="n">Node</span><span class="o">*</span> <span class="nf">stmt</span><span class="p">(</span><span class="n">Token</span><span class="o">**</span><span class="n">rest</span><span class="p">,</span> <span class="n">Token</span><span class="o">*</span> <span class="n">tok</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="n">tok</span><span class="p">,</span> <span class="s">"return"</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">Node</span><span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="n">new_unary</span><span class="p">(</span><span class="n">ND_RETURN</span><span class="p">,</span> <span class="n">expr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tok</span><span class="p">,</span> <span class="n">tok</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">));</span>
    <span class="o">*</span><span class="n">rest</span> <span class="o">=</span> <span class="n">skip</span><span class="p">(</span><span class="n">tok</span><span class="p">,</span> <span class="s">";"</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">node</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">if</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="n">tok</span><span class="p">,</span> <span class="s">"{"</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">compound_stmt</span><span class="p">(</span><span class="n">rest</span><span class="p">,</span> <span class="n">tok</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">if</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="n">tok</span><span class="p">,</span> <span class="s">"if"</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">tok</span> <span class="o">=</span> <span class="n">skip</span><span class="p">(</span><span class="n">tok</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">,</span> <span class="s">"("</span><span class="p">);</span>
    <span class="n">Node</span><span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="n">new_node</span><span class="p">(</span><span class="n">ND_IF</span><span class="p">);</span>
    <span class="n">node</span><span class="o">-&gt;</span><span class="n">cond</span> <span class="o">=</span> <span class="n">expr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tok</span><span class="p">,</span> <span class="n">tok</span><span class="p">);</span>
    <span class="n">tok</span> <span class="o">=</span> <span class="n">skip</span><span class="p">(</span><span class="n">tok</span><span class="p">,</span> <span class="s">")"</span><span class="p">);</span>
    <span class="n">node</span><span class="o">-&gt;</span><span class="n">then</span> <span class="o">=</span> <span class="n">stmt</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tok</span><span class="p">,</span> <span class="n">tok</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="n">tok</span><span class="p">,</span> <span class="s">"else"</span><span class="p">))</span> <span class="p">{</span>
      <span class="n">node</span><span class="o">-&gt;</span><span class="n">els</span> <span class="o">=</span> <span class="n">stmt</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tok</span><span class="p">,</span> <span class="n">tok</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="o">*</span><span class="n">rest</span> <span class="o">=</span> <span class="n">tok</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">node</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nf">expr_stmt</span><span class="p">(</span><span class="n">rest</span><span class="p">,</span> <span class="n">tok</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>For code generator, assembly code generation for <code class="language-plaintext highlighter-rouge">if</code> condition is introduced in <code class="language-plaintext highlighter-rouge">gen_stmt</code>. First we generate assembly code for <code class="language-plaintext highlighter-rouge">cond</code> node, and then we generate <code class="language-plaintext highlighter-rouge">je $0, %rax</code> to check condtion of <code class="language-plaintext highlighter-rouge">cond</code> node, and call <code class="language-plaintext highlighter-rouge">jump .L.else.%d</code> to do them instruction jump, <code class="language-plaintext highlighter-rouge">%d</code> is used to uniquly identify each <code class="language-plaintext highlighter-rouge">else</code> block. Because multiple <code class="language-plaintext highlighter-rouge">if</code> statement can be nested at the same time.</p>]]></content><author><name></name></author><category term="compiler"/><category term="c"/><category term="compiler"/><summary type="html"><![CDATA[Commit history for if statement feature]]></summary></entry><entry><title type="html">chibicc - Simple c compiler for statement</title><link href="https://bilyz98.github.io/blog/2025/chibicc-for-statement/" rel="alternate" type="text/html" title="chibicc - Simple c compiler for statement"/><published>2025-01-14T11:59:00+00:00</published><updated>2025-01-14T11:59:00+00:00</updated><id>https://bilyz98.github.io/blog/2025/chibicc-for-statement</id><content type="html" xml:base="https://bilyz98.github.io/blog/2025/chibicc-for-statement/"><![CDATA[<p><a href="https://github.com/BilyZ98/chibicc/commit/ed1f13abd63cc10e7cbd76c6f6de784df0f801c1">Commit history of for statement feature</a></p> <h2 id="what-is-changed-to-introduce-for-loop-">What is changed to introduce for loop ?</h2> <p>No big changes on top of if statement feature.</p> <p>For parser, add another grammar/production rule for <code class="language-plaintext highlighter-rouge">for</code> statement.</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// stmt = "return" expr ";" </span>
<span class="c1">//        | "{" compound_stmt</span>
<span class="c1">//        | expr_stmt</span>
<span class="c1">//        | "if" "(" expr ")" stmt ("else" stmt)?</span>
<span class="c1">//        | "for" "(" expr_stmt expr? ";" expr? ")" stmt </span>
<span class="k">static</span> <span class="n">Node</span><span class="o">*</span> <span class="nf">stmt</span><span class="p">(</span><span class="n">Token</span><span class="o">**</span><span class="n">rest</span><span class="p">,</span> <span class="n">Token</span><span class="o">*</span> <span class="n">tok</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="n">tok</span><span class="p">,</span> <span class="s">"return"</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">Node</span><span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="n">new_unary</span><span class="p">(</span><span class="n">ND_RETURN</span><span class="p">,</span> <span class="n">expr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tok</span><span class="p">,</span> <span class="n">tok</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">));</span>
    <span class="o">*</span><span class="n">rest</span> <span class="o">=</span> <span class="n">skip</span><span class="p">(</span><span class="n">tok</span><span class="p">,</span> <span class="s">";"</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">node</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">if</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="n">tok</span><span class="p">,</span> <span class="s">"{"</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">compound_stmt</span><span class="p">(</span><span class="n">rest</span><span class="p">,</span> <span class="n">tok</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">if</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="n">tok</span><span class="p">,</span> <span class="s">"if"</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">tok</span> <span class="o">=</span> <span class="n">skip</span><span class="p">(</span><span class="n">tok</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">,</span> <span class="s">"("</span><span class="p">);</span>
    <span class="n">Node</span><span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="n">new_node</span><span class="p">(</span><span class="n">ND_IF</span><span class="p">);</span>
    <span class="n">node</span><span class="o">-&gt;</span><span class="n">cond</span> <span class="o">=</span> <span class="n">expr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tok</span><span class="p">,</span> <span class="n">tok</span><span class="p">);</span>
    <span class="n">tok</span> <span class="o">=</span> <span class="n">skip</span><span class="p">(</span><span class="n">tok</span><span class="p">,</span> <span class="s">")"</span><span class="p">);</span>
    <span class="n">node</span><span class="o">-&gt;</span><span class="n">then</span> <span class="o">=</span> <span class="n">stmt</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tok</span><span class="p">,</span> <span class="n">tok</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="n">tok</span><span class="p">,</span> <span class="s">"else"</span><span class="p">))</span> <span class="p">{</span>
      <span class="n">node</span><span class="o">-&gt;</span><span class="n">els</span> <span class="o">=</span> <span class="n">stmt</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tok</span><span class="p">,</span> <span class="n">tok</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="o">*</span><span class="n">rest</span> <span class="o">=</span> <span class="n">tok</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">node</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">if</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="n">tok</span><span class="p">,</span> <span class="s">"for"</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">tok</span> <span class="o">=</span> <span class="n">skip</span><span class="p">(</span><span class="n">tok</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">,</span> <span class="s">"("</span><span class="p">);</span>
    <span class="n">Node</span><span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="n">new_node</span><span class="p">(</span><span class="n">ND_FOR</span><span class="p">);</span>
    <span class="n">node</span><span class="o">-&gt;</span><span class="n">init</span> <span class="o">=</span> <span class="n">expr_stmt</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tok</span><span class="p">,</span> <span class="n">tok</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">equal</span><span class="p">(</span><span class="n">tok</span><span class="p">,</span> <span class="s">";"</span><span class="p">))</span> <span class="p">{</span>
      <span class="n">node</span><span class="o">-&gt;</span><span class="n">cond</span> <span class="o">=</span> <span class="n">expr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tok</span><span class="p">,</span> <span class="n">tok</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">tok</span> <span class="o">=</span> <span class="n">skip</span><span class="p">(</span><span class="n">tok</span><span class="p">,</span> <span class="s">";"</span><span class="p">);</span>

    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">equal</span><span class="p">(</span><span class="n">tok</span><span class="p">,</span> <span class="s">")"</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">node</span><span class="o">-&gt;</span><span class="n">inc</span> <span class="o">=</span> <span class="n">expr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tok</span><span class="p">,</span> <span class="n">tok</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">tok</span> <span class="o">=</span> <span class="n">skip</span><span class="p">(</span><span class="n">tok</span><span class="p">,</span> <span class="s">")"</span><span class="p">);</span>
    <span class="n">node</span><span class="o">-&gt;</span><span class="n">then</span> <span class="o">=</span> <span class="n">stmt</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tok</span><span class="p">,</span> <span class="n">tok</span><span class="p">);</span>
    <span class="o">*</span><span class="n">rest</span> <span class="o">=</span> <span class="n">tok</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">node</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nf">expr_stmt</span><span class="p">(</span><span class="n">rest</span><span class="p">,</span> <span class="n">tok</span><span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div> <p>Introduce <code class="language-plaintext highlighter-rouge">init</code> and <code class="language-plaintext highlighter-rouge">inc</code> node inside of <code class="language-plaintext highlighter-rouge">Node</code> type to represent initialization and increment operation in <code class="language-plaintext highlighter-rouge">for</code> statement. <code class="language-plaintext highlighter-rouge">for(init;cond; inc){}</code></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="k">struct</span> <span class="n">Node</span> <span class="n">Node</span><span class="p">;</span>
<span class="k">struct</span> <span class="n">Node</span> <span class="p">{</span>
  <span class="n">NodeKind</span> <span class="n">kind</span><span class="p">;</span>
  <span class="n">Node</span><span class="o">*</span> <span class="n">lhs</span><span class="p">;</span> <span class="c1">//left hand side</span>
  <span class="n">Node</span><span class="o">*</span> <span class="n">rhs</span><span class="p">;</span> <span class="c1">// right hand side</span>
  <span class="n">Node</span><span class="o">*</span> <span class="n">next</span><span class="p">;</span> <span class="c1">// next node</span>
  <span class="n">Node</span><span class="o">*</span> <span class="n">body</span><span class="p">;</span> <span class="c1">// {} body node</span>

  <span class="c1">// "if" or "for" statement</span>
  <span class="n">Node</span><span class="o">*</span> <span class="n">cond</span><span class="p">;</span> 
  <span class="n">Node</span><span class="o">*</span> <span class="n">then</span><span class="p">;</span> 
  <span class="n">Node</span><span class="o">*</span> <span class="n">els</span><span class="p">;</span> 
  <span class="n">Node</span><span class="o">*</span> <span class="n">init</span><span class="p">;</span>
  <span class="n">Node</span><span class="o">*</span> <span class="n">inc</span><span class="p">;</span>


  <span class="c1">// char name;</span>
  <span class="n">Obj</span><span class="o">*</span> <span class="n">obj</span><span class="p">;</span> <span class="c1">// used if kind == ND_VAR</span>
  <span class="kt">int</span> <span class="n">val</span><span class="p">;</span>  <span class="c1">// used if kind == ND_NUM</span>
<span class="p">};</span>

</code></pre></div></div> <p>For code generator, generate <code class="language-plaintext highlighter-rouge">.L.begin.%d:</code> to indicate the start of the for block. Use <code class="language-plaintext highlighter-rouge">cmp $0, %%rax</code> and <code class="language-plaintext highlighter-rouge">jmp .L.end.%d</code> after <code class="language-plaintext highlighter-rouge">cond</code> to go out of for block. Use <code class="language-plaintext highlighter-rouge">jmp .L.begin.%d</code> to jmp back to the begining of the for block at the end. And then comparison at the begining will decide whether to jump out of the for block or not.</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">case</span> <span class="n">ND_FOR</span><span class="p">:</span> <span class="p">{</span>
      <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">count_depth</span><span class="p">();</span>
      <span class="n">gen_stmt</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">init</span><span class="p">);</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">".L.begin.%d:</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">c</span><span class="p">);</span>
      <span class="k">if</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">cond</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">gen_expr</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">cond</span><span class="p">);</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"  cmp $0, %%rax</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"  je .L.end.%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
      <span class="p">}</span>

      <span class="n">gen_stmt</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">then</span><span class="p">);</span>
      <span class="k">if</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">inc</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">gen_expr</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">inc</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">"  jmp .L.begin.%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">".L.end.%d:</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="compiler"/><category term="c"/><category term="compiler"/><summary type="html"><![CDATA[Commit history of for statement feature]]></summary></entry><entry><title type="html">chibicc - Simple c compiler block {} node</title><link href="https://bilyz98.github.io/blog/2025/chibicc-block/" rel="alternate" type="text/html" title="chibicc - Simple c compiler block {} node"/><published>2025-01-13T11:59:00+00:00</published><updated>2025-01-13T11:59:00+00:00</updated><id>https://bilyz98.github.io/blog/2025/chibicc-block</id><content type="html" xml:base="https://bilyz98.github.io/blog/2025/chibicc-block/"><![CDATA[<p><a href="https://github.com/BilyZ98/chibicc/commit/50d55515fe3a882f90fec3fbee8b5795239b60f8">Commit history for block feature</a></p> <h2 id="expected-an-expression-error-after-adding-block--node">expected an expression error after adding block {} node</h2> <p>Problem:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">{</span> <span class="nv">a</span><span class="o">=</span>3<span class="p">;</span> <span class="k">return </span>a<span class="p">;</span> <span class="o">}</span>
   ^ expected an expression
make: <span class="k">***</span> <span class="o">[</span>Makefile:12: <span class="nb">test</span><span class="o">]</span> Error 1
</code></pre></div></div> <p>Root cause:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// compound_stmt = stmt* "}"</span>
<span class="k">static</span> <span class="n">Node</span><span class="o">*</span> <span class="nf">compound_stmt</span><span class="p">(</span><span class="n">Token</span><span class="o">**</span> <span class="n">rest</span><span class="p">,</span> <span class="n">Token</span><span class="o">*</span> <span class="n">tok</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">Node</span> <span class="n">head</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="n">Node</span><span class="o">*</span> <span class="n">cur</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">head</span><span class="p">;</span>
  <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">equal</span><span class="p">(</span><span class="n">tok</span><span class="p">,</span> <span class="s">"}"</span><span class="p">))</span> <span class="p">{</span>
    <span class="c1">// This is the bug, should be tok not tok-&gt;next;</span>
    <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">stmt</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tok</span><span class="p">,</span> <span class="n">tok</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">Node</span><span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="n">new_node</span><span class="p">(</span><span class="n">ND_BLOCK</span><span class="p">);</span>
  <span class="n">node</span><span class="o">-&gt;</span><span class="n">body</span> <span class="o">=</span> <span class="n">head</span><span class="p">.</span><span class="n">next</span><span class="p">;</span>
  <span class="o">*</span><span class="n">rest</span> <span class="o">=</span> <span class="n">tok</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>

  <span class="k">return</span> <span class="n">node</span><span class="p">;</span>

<span class="p">}</span>
</code></pre></div></div> <p>Fix:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// compound_stmt = stmt* "}"</span>
<span class="k">static</span> <span class="n">Node</span><span class="o">*</span> <span class="nf">compound_stmt</span><span class="p">(</span><span class="n">Token</span><span class="o">**</span> <span class="n">rest</span><span class="p">,</span> <span class="n">Token</span><span class="o">*</span> <span class="n">tok</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">Node</span> <span class="n">head</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="n">Node</span><span class="o">*</span> <span class="n">cur</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">head</span><span class="p">;</span>
  <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">equal</span><span class="p">(</span><span class="n">tok</span><span class="p">,</span> <span class="s">"}"</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">stmt</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tok</span><span class="p">,</span> <span class="n">tok</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">Node</span><span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="n">new_node</span><span class="p">(</span><span class="n">ND_BLOCK</span><span class="p">);</span>
  <span class="n">node</span><span class="o">-&gt;</span><span class="n">body</span> <span class="o">=</span> <span class="n">head</span><span class="p">.</span><span class="n">next</span><span class="p">;</span>
  <span class="o">*</span><span class="n">rest</span> <span class="o">=</span> <span class="n">tok</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>

  <span class="k">return</span> <span class="n">node</span><span class="p">;</span>

<span class="p">}</span>
</code></pre></div></div> <h2 id="what-is-done-to-introduce-block-concept">What is done to introduce block concept?</h2> <p>Introduce another node in node struct called <code class="language-plaintext highlighter-rouge">body</code> to store the code content inside block</p> <p>No change is made to tokenizer</p> <p>For parser, introduce <code class="language-plaintext highlighter-rouge">compound_stmt</code> production/grammar rule for <code class="language-plaintext highlighter-rouge">stmt</code> generation rule.</p> <p>For code generator, start generating code from <code class="language-plaintext highlighter-rouge">Function-&gt;body</code> part which is a block itself. Each <code class="language-plaintext highlighter-rouge">body</code> inside each block has its own list of nodes. Previously we only have on list of nodes. Now we have one list of nodes for each block node.</p> <p>I guess this is for variable scope purpose, althought this has not been done in this commit history.</p>]]></content><author><name></name></author><category term="compiler"/><category term="c"/><category term="compiler"/><summary type="html"><![CDATA[Commit history for block feature]]></summary></entry><entry><title type="html">chibicc - Simple c compiler return keyword</title><link href="https://bilyz98.github.io/blog/2025/chibicc-return-keyword/" rel="alternate" type="text/html" title="chibicc - Simple c compiler return keyword"/><published>2025-01-12T11:59:00+00:00</published><updated>2025-01-12T11:59:00+00:00</updated><id>https://bilyz98.github.io/blog/2025/chibicc-return-keyword</id><content type="html" xml:base="https://bilyz98.github.io/blog/2025/chibicc-return-keyword/"><![CDATA[<h2 id="add-return-keyword-to-simple-c-compiler">Add return keyword to simple c compiler</h2> <p><a href="https://github.com/BilyZ98/chibicc/commit/f94ca394ade26ca861bd205d3714f103eb4dedb9">Commit history</a></p> <p>For tokenizer, <code class="language-plaintext highlighter-rouge">convert_keywords()</code> is added to convert kind of token from identity to keyword. So this means that all basic tokens are identity at first and later convert to keywrod type token.</p> <p>For parser, add extra prudction rule/grammar rule in expr geneartion. <code class="language-plaintext highlighter-rouge">stmt = "return" expr ";" | expr-stmt</code>. New node type <code class="language-plaintext highlighter-rouge">ND_RETURN</code> is added.</p> <p>For code generation, <code class="language-plaintext highlighter-rouge">jmp .L.return</code> is added to jump to specified assembly code.</p> <p>For test, add <code class="language-plaintext highlighter-rouge">return 1; 2; 3</code> to test return actually works.</p>]]></content><author><name></name></author><category term="compiler"/><category term="c"/><category term="compiler"/><summary type="html"><![CDATA[Add return keyword to simple c compiler]]></summary></entry><entry><title type="html">Learned idnex survey</title><link href="https://bilyz98.github.io/blog/2025/learned-index-survery/" rel="alternate" type="text/html" title="Learned idnex survey"/><published>2025-01-08T11:59:00+00:00</published><updated>2025-01-08T11:59:00+00:00</updated><id>https://bilyz98.github.io/blog/2025/learned-index-survery</id><content type="html" xml:base="https://bilyz98.github.io/blog/2025/learned-index-survery/"><![CDATA[<h2 id="what-is-learned-index-and-why">What is learned index and why?</h2> <p>To search a key in b+ tree, traditional way is to do binary search. This complexity time is O(Log_n)</p> <p>Learned index build model to learn the distribution of keys in space. The input is the key number and the output of the model is the location of the key in the storage array space. The time complexity is O(1) which is faster than binary search.</p> <h2 id="current-work">Current work</h2> <p><a href="https://arxiv.org/pdf/1712.01208">The case for learned index structures</a> proposes to replace every node in b+ tree with learned model.</p> <p>Each node contains a model trained from the keys covered by its key ranges.</p> <p>It’s said that in the paper that this hierachy style allows allows model to learn the rough key distribtuion at its key ranges. Bottom level model covers smalles range of keys, it’s easy for the model learn. Top level covers larget range of keys but it only cares about the big structure of the keys distribution and it leaves fine-grained key position to bottom level models.</p> <p>Search process:</p> <p>Model at each level gives its key position prediction until reaches the leaf child.</p> <p>Since model might not give the correct position prediction, learned index make sures that each model prediction error is within a predefined error bound.</p> <p>So it’s guarantee that key is located within the [lower_bound, upper_bound] range given by the model.</p> <p>This paper only mentions how to build model for read only scenario.</p> <p><a href="https://arxiv.org/pdf/1905.08898">ALEX</a> solves the updatable learned index problem.</p> <p>How ?</p> <p>Insert process:</p> <p>For non-full data node, it inserts the key to the predicted position from the model if there is a empty slow in the array..</p> <p>The predcited position might be occupied, so it shifts other elements towards the closet gap by one. ( I am not sure if the model should be trained after this shift operation, I think we should train a new model because that position of shifted key is changed, but the model train cost is too high if we do this for each occupied key.)</p> <p>For full-data node, it can choose to split the data node or matain a single data node but with allocation of largers storage space and retarined a new model.</p> <p>For data node expansion, new position in array of original key is given by new model.</p> <p>This is not the same as traditional binary tree which just does simple copy.</p> <p>For internal nodes, ALEX choose to split the internal nodes horizontally, i.e at the same level.</p> <p>Alex can choose to turn data nodes to internal nodes which is the same as split the node vertically, increasing the depth of the tree?</p> <h2 id="whats-next-">What’s next ?</h2> <p><a href="Learned index survey">https://arxiv.org/pdf/2403.06456</a> talks about development of learned index. It classifies learned index into multi-dimensional and mutable/immutable categories.</p> <p>What’s not talked about is how learned index is efficiently integrated into existing system.</p> <h2 id="references">References</h2> <p><a href="https://www.youtube.com/watch?v=2A3tiAmaq_c">Jeaf dean’s talk about ml for sys in NIPS’25</a></p> <p><a href="https://zongheng.me/pubs/qdtree-sigmod20.pdf">qd-tree</a> . Why only for data analytics?</p> <p><a href="https://www.cidrdb.org/cidr2019/papers/p117-kraska-cidr19.pdf">SageDB: A Learned Database System</a></p> <p><a href="https://dbgroup.cs.tsinghua.edu.cn/ligl/papers/experiment-learned-index.pdf">Learned Index: A Comprehensive Experimental Evaluation</a></p> <p><a href="https://www.usenix.org/conference/osdi20/presentation/wei">Fast RDMA-based Ordered Key-Value Store using Remote Learned Cache</a></p>]]></content><author><name></name></author><category term="learned"/><category term="index"/><category term="research"/><category term="learned"/><category term="index"/><category term="research"/><summary type="html"><![CDATA[What is learned index and why? To search a key in b+ tree, traditional way is to do binary search. This complexity time is O(Log_n)]]></summary></entry><entry><title type="html">chibicc C compiler - multi char variable name</title><link href="https://bilyz98.github.io/blog/2025/chibicc-multi-char-var-name/" rel="alternate" type="text/html" title="chibicc C compiler - multi char variable name"/><published>2025-01-05T11:59:00+00:00</published><updated>2025-01-05T11:59:00+00:00</updated><id>https://bilyz98.github.io/blog/2025/chibicc-multi-char-var-name</id><content type="html" xml:base="https://bilyz98.github.io/blog/2025/chibicc-multi-char-var-name/"><![CDATA[<h3 id="find-bug-in-code-that-leads-to-seg-fault">Find bug in code that leads to seg fault.</h3> <p><a href="https://github.com/BilyZ98/chibicc/commit/3ca91cc6431246e1b23f4503b6442e77e7457246">https://github.com/BilyZ98/chibicc/commit/3ca91cc6431246e1b23f4503b6442e77e7457246</a></p> <p>The bug code is at parse.c. I use gdb to find out the bug location.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>77      ../sysdeps/x86_64/multiarch/strlen-evex.S: No such file or directory.
(gdb) bt
#0  __strlen_evex () at ../sysdeps/x86_64/multiarch/strlen-evex.S:77
#1  0x0000555555555ff7 in find_var (start=0x7fffffffe399 "a;", len=1) at parse.c:194
#2  0x0000555555556140 in primary (rest=0x7fffffffdd30, tok=0x55555555a360) at parse.c:220
#3  0x0000555555555fbf in unary (rest=0x7fffffffdd30, tok=0x55555555a360) at parse.c:187
#4  0x0000555555555e73 in mul (rest=0x7fffffffdd60, tok=0x55555555a360) at parse.c:160
#5  0x0000555555555d9a in add (rest=0x7fffffffdd90, tok=0x55555555a360) at parse.c:138
#6  0x0000555555555c1f in relational (rest=0x7fffffffddc0, tok=0x55555555a360) at parse.c:109
#7  0x0000555555555b46 in equality (rest=0x7fffffffddf0, tok=0x55555555a360) at parse.c:90
#8  0x0000555555555ac1 in assign (rest=0x7fffffffde40, tok=0x55555555a360) at parse.c:78
#9  0x0000555555555a98 in expr (rest=0x7fffffffde40, tok=0x55555555a360) at parse.c:73
#10 0x0000555555555a3d in expr_stmt (rest=0x7fffffffde98, tok=0x55555555a360) at parse.c:65
#11 0x00005555555559e4 in stmt (rest=0x7fffffffde98, tok=0x55555555a360) at parse.c:46
#12 0x0000555555556248 in parse (tok=0x55555555a360) at parse.c:245
#13 0x00005555555558c9 in main (argc=2, argv=0x7fffffffe038) at main.c:9
</code></pre></div></div> <p>function</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="n">Obj</span><span class="o">*</span> <span class="nf">find_var</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">start</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span><span class="p">(</span><span class="n">Obj</span><span class="o">*</span> <span class="n">o_idx</span> <span class="o">=</span> <span class="n">local_obj_ptr</span><span class="p">;</span> <span class="n">o_idx</span><span class="p">;</span> <span class="n">o_idx</span><span class="o">=</span><span class="n">o_idx</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">len</span> <span class="o">==</span> <span class="n">strlen</span><span class="p">(</span><span class="n">o_idx</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">strncmp</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">o_idx</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span> <span class="n">len</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">o_idx</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Finally found the bug.</p> <p>I did not include this define at <code class="language-plaintext highlighter-rouge">chibicc.h</code></p> <p>lol.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#define _POSIX_C_SOURCE 200809L
</code></pre></div></div> <p>This line of code enable functions like <code class="language-plaintext highlighter-rouge">strndup, getline, and clock_gettime</code> which are not part of the standard C library but are available in the POSIX standard. Spend really long time on this.</p> <p>Correct code:</p> <p><a href="https://github.com/BilyZ98/chibicc/tree/1651006f9035bb0a1f3afffd1fb328948006cc28">https://github.com/BilyZ98/chibicc/tree/1651006f9035bb0a1f3afffd1fb328948006cc28</a></p>]]></content><author><name></name></author><category term="compiler"/><category term="c"/><category term="compiler"/><category term="cpp"/><summary type="html"><![CDATA[Find bug in code that leads to seg fault.]]></summary></entry></feed>